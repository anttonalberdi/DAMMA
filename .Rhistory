scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
compounds <- functions[functions$Function == "Dietary carbohydrate degradation","Compound"]
compound_table_sub <- compound_table[,compounds]
compounds <- functions[functions$Function == "Dietary carbohydrate degradation","Compound"]
compounds_table_sub <- compounds_table[,compounds]
compounds <- functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"]
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub
compounds_table_sub <- rowSum(compounds_table_sub)
compounds_table_sub <- rowSums(compounds_table_sub)
head(compounds_table_sub)
compounds <- functions_table[functions_table$Function == "Dietary lipid degradation","Compound"]
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub
compounds <- functions_table[functions_table$Function == "Dietary lipid degradation","Compound"]
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
compounds_table_sub
enzyme_groups <- functions_table[functions_table$Function == "Protein degradation","Compound"]
enzyme_groups
compounds_table_sub <- compounds_table[,enzyme_groups]
compounds_table_sub
compounds_table_sub <- compounds_table[,"Peptides"]
compounds_table_sub
compounds_table_sub <- t(t(compounds_table[,"Peptides"])
)
compounds_table_sub
compounds <- functions[functions_table$functions_table == "Mucin degradation","Compound"]
compounds <- functions_table[functions_table$Function == "Mucin degradation","Compound"]
compounds
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
compounds_table_sub
compounds <- functions_table[functions_table$Function == "SCFA production","Compound"]
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub
compounds <- unique(functions_table[functions_table$Function == "SCFA production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub
compounds <- unique(functions_table[functions_table$Function == "Organic anion production","Compound"])
compounds
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub
aggregated_table <- c()
#Aggregate dietary carbohydrates
compounds <- unique(functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate dietary lipids
compounds <- unique(functions_table[functions_table$Function == "Dietary lipid degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate dietary proteins
compounds_table_sub <- t(t(compounds_table[,"Peptides"]))
colnames(compounds_table_sub) <- "Dietary protein degradation"
#Aggregate mucins
compounds <- unique(functions_table[functions_table$Function == "Mucin degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate SCFAs
compounds <- unique(functions_table[functions_table$Function == "SCFA production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate organic anions
compounds <- unique(functions_table[functions_table$Function == "Organic anion production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate secondary bile acids
compounds <- unique(functions_table[functions_table$Function == "Secondary bile acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate amino acids
compounds <- unique(functions_table[functions_table$Function == "Amino acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate amino acid derivatives
compounds <- unique(functions_table[functions_table$Function == "Amino acid derivative production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
#Aggregate vitamins
compounds <- unique(functions_table[functions_table$Function == "Vitamin production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,compounds_table_sub)
aggregated_table
aggregated_table <- cbind(aggregated_table,"Dietary carbohydrate degradation"=compounds_table_sub)
aggregated_table
#Create empty table
aggregated_table <- c()
#Aggregate dietary carbohydrates
compounds <- unique(functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Dietary carbohydrate degradation"=compounds_table_sub)
#Aggregate dietary lipids
compounds <- unique(functions_table[functions_table$Function == "Dietary lipid degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Dietary lipid degradation"=compounds_table_sub)
#Aggregate dietary proteins
compounds_table_sub <- t(t(compounds_table[,"Peptides"]))
colnames(compounds_table_sub) <- "Dietary protein degradation"
#Aggregate mucins
compounds <- unique(functions_table[functions_table$Function == "Mucin degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Mucin degradation"=compounds_table_sub)
#Aggregate SCFAs
compounds <- unique(functions_table[functions_table$Function == "SCFA production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"SCFA production"=compounds_table_sub)
#Aggregate organic anions
compounds <- unique(functions_table[functions_table$Function == "Organic anion production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Organic anion production"=compounds_table_sub)
#Aggregate secondary bile acids
compounds <- unique(functions_table[functions_table$Function == "Secondary bile acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Secondary bile acid production"=compounds_table_sub)
#Aggregate amino acids
compounds <- unique(functions_table[functions_table$Function == "Amino acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Amino acid production"=compounds_table_sub)
#Aggregate amino acid derivatives
compounds <- unique(functions_table[functions_table$Function == "Amino acid derivative production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Amino acid derivative production"=compounds_table_sub)
#Aggregate vitamins
compounds <- unique(functions_table[functions_table$Function == "Vitamin production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
aggregated_table <- cbind(aggregated_table,"Vitamin production"=compounds_table_sub)
aggregated_table
compounds_table_sub
compounds <- unique(functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
compounds_table_sub
length(compounds)
compounds_table_sub <- t(t(compounds_table[,"Peptides"]))
compounds_table_sub
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(DAMMA)
library(data.table)
#Load DAMMA support data
data(damma_data)
#Visualise example annotations
head(annotations_example)
#Visualise functions table
head(functions_table)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
compounds_table <- aggregate_compounds(distilled_table,functions_table)
functions_table <- aggregate_functions(compounds_table,functions_table,normalise=FALSE)
functions_table
functions_table <- aggregate_functions(compounds_table,functions_table,normalise=TRUE)
compounds_table_sub <- t(t(compounds_table[,"Peptides"]))
compounds_table_sub
compounds_table_sub/length(compounds)
max(compounds_table_sub)
compounds_table_sub/max(compounds_table_sub)
normalise=TRUE
#Create empty table
aggregated_table <- c()
#Aggregate dietary carbohydrates
compounds <- unique(functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Dietary carbohydrate degradation"=compounds_table_sub)
#Aggregate dietary lipids
compounds <- unique(functions_table[functions_table$Function == "Dietary lipid degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Dietary lipid degradation"=compounds_table_sub)
#Aggregate dietary proteins
compounds_table_sub <- t(t(compounds_table[,"Peptides"]))
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
colnames(compounds_table_sub) <- "Dietary protein degradation"
#Aggregate mucins
compounds <- unique(functions_table[functions_table$Function == "Mucin degradation","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Mucin degradation"=compounds_table_sub)
#Aggregate SCFAs
compounds <- unique(functions_table[functions_table$Function == "SCFA production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"SCFA production"=compounds_table_sub)
#Aggregate organic anions
compounds <- unique(functions_table[functions_table$Function == "Organic anion production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Organic anion production"=compounds_table_sub)
#Aggregate secondary bile acids
compounds <- unique(functions_table[functions_table$Function == "Secondary bile acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Secondary bile acid production"=compounds_table_sub)
#Aggregate amino acids
compounds <- unique(functions_table[functions_table$Function == "Amino acid production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Amino acid production"=compounds_table_sub)
#Aggregate amino acid derivatives
compounds <- unique(functions_table[functions_table$Function == "Amino acid derivative production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Amino acid derivative production"=compounds_table_sub)
#Aggregate vitamins
compounds <- unique(functions_table[functions_table$Function == "Vitamin production","Compound"])
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
if(normalise == FALSE){
compounds_table_sub <- compounds_table_sub/length(compounds)
}else{
compounds_table_sub <- compounds_table_sub/max(compounds_table_sub)
}
aggregated_table <- cbind(aggregated_table,"Vitamin production"=compounds_table_sub)
class(functions_table)
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(data.table)
data(damma_data)
#Load DAMMA library
library(DAMMA)
#Load DAMMA support data
data(damma_data)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
compounds_table <- aggregate_compounds(distilled_table,functions_table)
functions_table <- aggregate_functions(compounds_table,functions_table,normalise=TRUE)
functions_table <- aggregate_functions(compounds_table,functions_table,normalise=TRUE)
functions_table
functions_table <- as.data.frame(functions_table)
head(functions_table)
data(damma_data)
head(functions_table)
functions_table <- as.data.frame(functions_table)
head(functions_table)
class(functions_table)
compounds <- unique(functions_table[functions_table$Function == "Dietary carbohydrate degradation","Compound"])
compounds
compounds_table_sub <- compounds_table[,compounds]
compounds_table_sub <- rowSums(compounds_table_sub)
compounds_table_sub
compounds_table_sub/length(compounds)
compounds_table_sub/max(compounds_table_sub)
functions_table <- aggregate_functions(compounds_table,functions_table,normalise=TRUE)
head(functions_table)
functions_table
functions_table -> distilled_table_functions
library(data.table)
library(ggplot2)
library(RColorBrewer)
functions_table_df <- melt(distilled_table_functions)
functions_table_df
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
functions_table_df <- melt(distilled_table_functions)
colnames(functions_table_df) <- c("MAGs","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn( colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
distilled_table_functions <- aggregate_functions(distilled_table_compounds,functions_table,normalise=FALSE)
distilled_table_compounds <- aggregate_compounds(distilled_table,functions_table)
data(damma_data)
distilled_table_compounds <- aggregate_compounds(distilled_table,functions_table)
distilled_table_functions <- aggregate_functions(distilled_table_compounds,functions_table,normalise=FALSE)
#Prepare input table
functions_table_df <- melt(distilled_table_functions)
colnames(functions_table_df) <- c("MAGs","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn( colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_fill_gradientn(limits = c(0,1),
#scale_fill_gradientn( colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_fill_gradientn(limits = c(0,1)+
#scale_fill_gradientn( colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_fill_gradientn(limits = c(0,1))+
#scale_fill_gradientn( colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds,functions_table)
head(distilled_table_compounds_bin)
distilled_table_compounds_bin
head(distilled_table_compounds)
damma_bin(distilled_table_compounds,functions_table)
fullness_table_binary <- distilled_table_compounds
fullness_table_binary[fullness_table_binary >= threshold] <- 1
fullness_table_binary[fullness_table_binary < threshold] <- 0
threshold=0.9
fullness_table_binary <- distilled_table_compounds
fullness_table_binary[fullness_table_binary >= threshold] <- 1
fullness_table_binary[fullness_table_binary < threshold] <- 0
head(fullness_table_binary)
missing(completeness)
head(functions_table)
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds)
head(distilled_table_compounds_bin)
completeness <- read.csv("/Users/anttonalberdi/genomeInfo.csv")
head(completeness)
completeness_example <- completeness[(completeness$completeness == "bin_m1.cct123") | (completeness$completeness == "bin_m9.vmb60") | (completeness$completeness == "bin_m1.mtb106") | (completeness$completeness == "bin_m1.mtb2") | (completeness$completeness == "bin_m1.mxb107_sub") | (completeness$completeness == "bin_m1.vmb35") | (completeness$completeness == "bin_m1.vmb46") | (completeness$completeness == " bin_m10.cct0"),]
head(completeness)
completeness
completeness_example
completeness[(completeness$completeness == "bin_m1.cct123") | (completeness$completeness == "bin_m9.vmb60") | (completeness$completeness == "bin_m1.mtb106") | (completeness$completeness == "bin_m1.mtb2") | (completeness$completeness == "bin_m1.mxb107_sub") | (completeness$completeness == "bin_m1.vmb35") | (completeness$completeness == "bin_m1.vmb46") | (completeness$completeness == " bin_m10.cct0"),]
completeness_example <- completeness[(completeness$completeness == "bin_m1.cct123") || (completeness$completeness == "bin_m9.vmb60") | (completeness$completeness == "bin_m1.mtb106") | (completeness$completeness == "bin_m1.mtb2") | (completeness$completeness == "bin_m1.mxb107_sub") | (completeness$completeness == "bin_m1.vmb35") | (completeness$completeness == "bin_m1.vmb46") | (completeness$completeness == " bin_m10.cct0"),]
completeness_example
completeness_example <- completeness[(completeness$completeness %in% c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0"),]
ompleteness$completeness %in% c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0")
completeness$completeness %in% c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0")
completeness
completeness_example <- completeness[(completeness$genome %in% c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0"),]
completeness_example <- completeness[(completeness$genome %in% c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0")),]
completeness_example
completeness_table <- cbind(genome=c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0"),completeness=c(100,98,85.8,94.5,97,100,70))
length(c(100,98,85.8,94.5,97,100,70))
length(c("bin_m1.cct123","bin_m9.vmb60","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46"," bin_m10.cct0"))
distilled_table_compounds_bin
completeness_table <- cbind(genome=c("bin_m1.cct123","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46","bin_m9.vmb60"),completeness=c(100,98,85.8,94.5,97,100,70))
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds,threshold=0.9)
distilled_table_compounds_bin
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds,threshold=0.9)
distilled_table_functions_bin <- aggregate_functions(distilled_table_compounds_bin,functions_table,normalise=FALSE)
distilled_table_functions_bin
#Prepare input table
functions_table_df <- melt(distilled_table_functions_bin)
colnames(functions_table_df) <- c("MAGs","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
#Prepare input table
compounds_table_df <- melt(distilled_table_compounds_bin)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
distilled_table_functions_bin <- aggregate_functions(distilled_table_compounds_bin,functions_table,normalise=TRUE)
functions_table_df <- melt(distilled_table_functions_bin)
colnames(functions_table_df) <- c("MAGs","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Dietary carbohydrate degradation","Dietary lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=MAGs, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds,threshold=0.9,completeness=completeness_table)
head(completeness_table)
roxygen2::roxygenise()
setwd("/Users/anttonalberdi/github/DAMMA/")
gene_annotations <- read.table("data/source/gene_annotations.tsv",header=TRUE,sep="\t")
library(gtools)
gene_annotations <- gene_annotations[mixedorder(gene_annotations$genome),]
gene_expression <- read.table("data/source/gene_expression.tsv",header=TRUE,sep="\t",row.names=1)
genome_counts <- read.table("data/source/genome_counts.tsv",header=TRUE,sep="\t",row.names=1)
genome_quality <- read.table("data/source/genome_quality.tsv",header=TRUE,sep="\t")
pathway_table_FD1 <- read.table("data/source/DAMMA_db1.tsv",header=TRUE,sep="\t")
pathway_table_FD2 <- read.table("data/source/DAMMA_db2.tsv",header=TRUE,sep="\t")
pathway_table_FD3 <- read.table("data/source/DAMMA_db3.tsv",header=TRUE,sep="\t")
pathway_table_FD4 <- read.table("data/source/DAMMA_db4.tsv",header=TRUE,sep="\t")
pathway_table_FD5 <- read.table("data/source/DAMMA_db5.tsv",header=TRUE,sep="\t")
pathway_table_FD6 <- read.table("data/source/DAMMA_db6.tsv",header=TRUE,sep="\t")
pathway_table_FD7 <- read.table("data/source/DAMMA_db7.tsv",header=TRUE,sep="\t")
#Use latest version as default
pathway_table <- pathway_table_FD7
save(pathway_table,gene_annotations,gene_expression,genome_counts,genome_quality,
pathway_table_FD1,
pathway_table_FD2,
pathway_table_FD3,
pathway_table_FD4,
pathway_table_FD5,
pathway_table_FD6,
pathway_table_FD7,
file="data/damma_data.RData")
