MAG_counts_sub_tss[,-1] <- tss(MAG_counts_sub_tss[,-1])
head(MAG_counts_sub_tss)
gene_counts_mag_tss <- gene_counts_mag
head(gene_counts_mag_tss)
class(gene_counts_mag)
MAG_counts_sub_tss <- as.data.frame(MAG_counts_weighed[,colnames(MAG_counts_weighed) %in% gsub("Group.1","Genome",colnames(gene_counts_mag))])
MAG_counts_sub_tss[,-1] <- tss(MAG_counts_sub_tss[,-1])
gene_counts_mag_tss <- gene_counts_mag
gene_counts_mag_tss[,-1] <- tss(gene_counts_mag_tss[,-1])
head(MAG_counts_sub_tss)
MAG_counts_sub_tss <- as.data.frame(MAG_counts_weighed[,colnames(MAG_counts_weighed) %in% gsub("Group.1","Genome",colnames(gene_counts_mag))])
head(MAG_counts_sub_tss)
head(gene_counts_mag_tss)
colnames(gene_counts_mag_tss) <- "Genome"
MAG_counts_sub_tss <- MAG_counts_sub_tss[, intersect(colnames(MAG_counts_sub_tss),colnames(gene_counts_mag_tss))]
gene_counts_mag_tss <- gene_counts_mag_tss[, intersect(colnames(MAG_counts_sub_tss),colnames(gene_counts_mag_tss))]
head(MAG_counts_sub_tss)
MAG_counts_sub_tss <- as.data.frame(MAG_counts_weighed[,colnames(MAG_counts_weighed) %in% gsub("Group.1","Genome",colnames(gene_counts_mag))])
MAG_counts_sub_tss[,-1] <- tss(MAG_counts_sub_tss[,-1])
gene_counts_mag_tss <- gene_counts_mag
gene_counts_mag_tss[,-1] <- tss(gene_counts_mag_tss[,-1])
colnames(gene_counts_mag_tss) <- "Genome"
head(gene_counts_mag_tss)
MAG_counts_sub_tss <- as.data.frame(MAG_counts_weighed[,colnames(MAG_counts_weighed) %in% gsub("Group.1","Genome",colnames(gene_counts_mag))])
MAG_counts_sub_tss[,-1] <- tss(MAG_counts_sub_tss[,-1])
gene_counts_mag_tss <- gene_counts_mag
gene_counts_mag_tss[,-1] <- tss(gene_counts_mag_tss[,-1])
colnames(gene_counts_mag_tss)[1] <- "Genome"
head(gene_counts_mag_tss)
#Ensure same samples are considered
MAG_counts_sub_tss <- MAG_counts_sub_tss[, intersect(colnames(MAG_counts_sub_tss),colnames(gene_counts_mag_tss))]
gene_counts_mag_tss <- gene_counts_mag_tss[, intersect(colnames(MAG_counts_sub_tss),colnames(gene_counts_mag_tss))]
head(MAG_counts_sub_tss)
MetaG_melt <- melt(MAG_counts_sub_tss)
MetaG_melt <- MetaG_melt[order(MetaG_melt[,2],MetaG_melt[,1]),]
MetaT_melt <- melt(gene_counts_mag_tss)
MetaT_melt <- MetaT_melt[order(MetaT_melt[,2],MetaT_melt[,1]),]
MetaG_MetaT <- cbind(MetaG_melt,MetaT_melt[,2])
colnames(MetaG_MetaT) <- c("MAG","Sample","MetaG","MetaT")
head(MetaG_MetaT)
MetaG_MetaT <- merge(MetaG_MetaT,MAG_taxonomy[,c("user_genome","Phylum")],by.x="MAG",by.y="user_genome")
#Overall correlation
summary(lm(MetaG~MetaT, data=MetaG_MetaT))
cor.test(~MetaG+MetaT, data=MetaG_MetaT)
ggplot(MetaG_MetaT,aes(x=MetaG,y=MetaT,color=Phylum)) +
geom_point(alpha = 0.2) +
xlim(0, 0.2) +
ylim(0, 0.2) +
geom_smooth(method='lm') +
theme_minimal()
head(MetaG_MetaT)
MetaG_melt <- melt(MAG_counts_sub_tss)
MetaG_melt <- MetaG_melt[order(MetaG_melt[,2],MetaG_melt[,1]),]
head(MetaG_melt)
MetaT_melt <- melt(gene_counts_mag_tss)
head(MetaT_melt)
#Melt and merge
MetaG_melt <- melt(MAG_counts_sub_tss)
MetaG_melt <- MetaG_melt[order(MetaG_melt[,2],MetaG_melt[,1]),]
MetaT_melt <- melt(gene_counts_mag_tss)
MetaT_melt <- MetaT_melt[order(MetaT_melt[,2],MetaT_melt[,1]),]
MetaG_MetaT <- cbind(MetaG_melt,MetaT_melt[,3])
colnames(MetaG_MetaT) <- c("MAG","Sample","MetaG","MetaT")
MetaG_MetaT <- merge(MetaG_MetaT,MAG_taxonomy[,c("user_genome","Phylum")],by.x="MAG",by.y="user_genome")
ggplot(MetaG_MetaT,aes(x=MetaG,y=MetaT,color=Phylum)) +
geom_point(alpha = 0.2) +
xlim(0, 0.2) +
ylim(0, 0.2) +
geom_smooth(method='lm') +
theme_minimal()
setwd("/Users/anttonalberdi/github/holofood_damma/")
library(data.table)
library(DAMMA)
#Load functions
data(damma_data)
#Distillate ileum
annotations_file="annotations_ileum.tsv"
annotations <- fread(annotations_file)
distilled_ileum <- damma(annotations,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_ileum,file="distilled_ileum.RData")
#Distillate caecum
annotations_file="annotations_caecum.tsv"
annotations <- fread(annotations_file)
distilled_caecum <- damma(annotations,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_caecum,file="distilled_caecum.RData")
distilled_caecum_compounds <- damma_compounds(distilled_caecum,functions_table)
distilled_ileum_compounds <- damma_compounds(distilled_ileum,functions_table)
compounds_table_df <- melt(distilled_caecum_compounds)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(distilled_caecum_compounds)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
load("distilled_caecum.RData")
distilled_caecum_compounds <- damma_compounds(distilled_caecum,functions_table)
load("distilled_ileum.RData")
distilled_ileum_compounds <- damma_compounds(distilled_ileum,functions_table)
head(distilled_caecum_compounds)
distilled_caecum_compounds1 <- distilled_caecum_compounds[c(1:165),]
distilled_caecum_compounds2 <- distilled_caecum_compounds[c(166:330),]
distilled_caecum_compounds3 <- distilled_caecum_compounds[c(331:495),]
distilled_caecum_compounds4 <- distilled_caecum_compounds[c(496:660),]
distilled_caecum_compounds5 <- distilled_caecum_compounds[c(661:825),]
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(distilled_caecum_compounds1)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
#Prepare input table
compounds_table_df <- melt(distilled_caecum_compounds2)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
compounds_table_df <- melt(distilled_ileum_compounds)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
directory="/Users/anttonalberdi/github/holofood_chicken_transcriptomics/statistics/"
setwd(directory)
library("DESeq2")
library("RColorBrewer")
library("gplots")
library("devtools")
library("vegan")
library("hilldiv")
library("genefilter")
library("ggplot2")
library("grDevices")
#Define sample files
sampleFiles <- list.files("counts", pattern="counts", full.names=TRUE)
#Define sample names
sampleNames <- gsub("counts/","",sampleFiles)
sampleNames <- gsub(".counts","",sampleNames)
length(sampleNames)
metadata <- read.csv("metadata.csv",row.names=1)
metadata <- metadata[sampleNames,]
nrow(metadata)
sampleTable <- data.frame(Sample = sampleNames, File = sampleFiles, Section = metadata$Section, Type = metadata$Type, Trial=metadata$Trial, Day=metadata$Day, Sex=metadata$Sex, Breed=metadata$Breed, Treatment=metadata$Treatment, Campylo=metadata$Campylo)
head(sampleTable)
head(sampleTable,20)
head(metadata)
head(sampleNames)
metadata <- read.csv("metadata.csv",row.names=1)
head(metadata)
grepl("E1a",sampleType)
sampleType <- sampleNames
grepl("E1a",sampleType)
grepl("E1a",sampleType) <- CC
grepl("B1a",sampleType) <- IC
sampleType <- sampleNames
grepl("E1a",sampleType) <- "CC"
grepl("B1a",sampleType) <- "IC"
sampleType <- sampleNames
sampleType[grepl("E1a",sampleType)] <- "CC"
sampleType[grepl("B1a",sampleType)] <- "IC"
sampleType
animalCode <- sampleNames
head(animalCode)
substr(animalCode,1,7)
animalCode <- substr(animalCode,1,7)
length(animalCode)
metadata <- read.csv("metadata.csv",row.names=1)
metadata <- read.csv("metadata.txt",header=TRUE,sep="\t")
metadata <- read.csv("animal_chicken_05052022.txt",header=TRUE,sep="\t")
head(metadata)
metadata <- read.csv("metadata.txt",header=TRUE,sep="\t")
head(metadata)
metadata <- metadata[metadata$animal_code %in% animalCode,]
head(metadata)
nrow(metadata)
length(animalCode)
length(unique(animalCode))
animalCode
sampleNames <- gsub("counts/","",sampleFiles)
sampleNames <- gsub(".counts","",sampleNames)
#Intestinal tissue vector
sampleType <- sampleNames
sampleType[grepl("E1a",sampleType)] <- "CC"
sampleType[grepl("B1a",sampleType)] <- "IC"
#Animal code vector
animalCode <- sampleNames
animalCode <- substr(animalCode,1,7)
animalCode
sampleFiles <- list.files("counts", pattern="counts", full.names=TRUE)
#Define sample names
sampleNames <- gsub("counts/","",sampleFiles)
sampleNames <- gsub(".counts","",sampleNames)
#Intestinal tissue vector
sampleType <- sampleNames
sampleType[grepl("E1a",sampleType)] <- "CC"
sampleType[grepl("B1a",sampleType)] <- "IC"
#Animal code vector
animalCode <- sampleNames
animalCode <- substr(animalCode,1,7)
animalCode
length(unique(animalCode))
metadata <- read.csv("metadata.txt",header=TRUE,sep="\t")
metadata <- metadata[metadata$animal_code %in% animalCode,]
nrow(metadata)
genes <- read.table("counts/CB11.18E1a.counts")[,1]
head(genes)
length(genes)
tail(genes)
genes <- genes[1:24131]
tail(genes)
genes <- t(t(genes))
head(genes)
sampleFiles[1]
file=sampleFiles[1]
file
sample <- gsub("counts/","",file)
sample <- gsub(".counts","",sample)
sample
counts <- read.table(file)
head(counts)
counts[counts[,1] <- gsub("gene-","",counts[counts[,1])
counts[,1] <- gsub("gene-","",counts[,1])
head(counts)
head(genes)
colnames(genes) <- "Gene"
nrow(genes)
colnames(counts)[1] <- "Gene"
colnames(counts)[2] <- sample
genes <- merge(genes,counts[,2],by="Gene",all.x=TRUE)
genes <- merge(genes,counts[,c(1:2)],by="Gene",all.x=TRUE)
head(genes)
nrow(genes)
length(sampleFiles)
file=sampleFiles[438]
sample <- gsub("counts/","",file)
sample <- gsub(".counts","",sample)
counts <- read.table(file)
counts[,1] <- gsub("gene-","",counts[,1])
colnames(counts)[1] <- "Gene"
colnames(counts)[2] <- sample
head(counts)
file="CA09.12E1a.counts"
sample <- gsub("counts/","",file)
sample <- gsub(".counts","",sample)
counts <- read.table(file)
counts[,1] <- gsub("gene-","",counts[,1])
colnames(counts)[1] <- "Gene"
colnames(counts)[2] <- sample
file="counts/CA09.12E1a.counts"
sample <- gsub("counts/","",file)
sample <- gsub(".counts","",sample)
counts <- read.table(file)
counts[,1] <- gsub("gene-","",counts[,1])
colnames(counts)[1] <- "Gene"
colnames(counts)[2] <- sample
head(counts)
nrow(counts)
genes <- read.table("counts/CB11.18E1a.counts")[,1]
genes <- genes[1:24131]
genes <- t(t(genes))
colnames(genes) <- "Gene"
sampleFiles <- list.files("counts", pattern="counts", full.names=TRUE)
#Iterate across samples
for (file in sampleFiles){
sample <- gsub("counts/","",file)
sample <- gsub(".counts","",sample)
cat(sample,"\n")
counts <- read.table(file)
counts[,1] <- gsub("gene-","",counts[,1])
colnames(counts)[1] <- "Gene"
colnames(counts)[2] <- sample
genes <- merge(genes,counts[,c(1:2)],by="Gene",all.x=TRUE)
}
head(genes)
write.table(genes,"gene_counts_table.tsv",sep="\t",quote=FALSE,row.names=FALSE,col.names=TRUE)
colSums(genes)
colSums(genes[,-1])
genes[,1]
genes[,2]
genes[is.na(genes)] <- 0
colSums(genes[,-1])
gene_counts <- read.table("gene_counts_table.tsv",sep="\t",row.names=1)
head(gene_counts)
gene_counts <- read.table("gene_counts_table.tsv",sep="\t",row.names=1,header=TRUE)
head(gene_counts)
rownames(gene_counts)
mean(colSums(gene_counts))
colSums(gene_counts)
gene_counts <- read.table("gene_counts_table.tsv",sep="\t",row.names=1,header=TRUE)
mean(colSums(gene_counts))
gene_counts[,1]
gene_counts[is.na(gene_counts[,1]),]
gene_counts[is.na(gene_counts)] <- 0
mean(colSums(gene_counts))
boxplot(colSums(gene_counts))
metadata <- read.csv("metadata.txt",header=TRUE,sep="\t")
head(metadata)
metadata <- cbind(sampleNames,sampleType,animalCode)
head(metadata)
metadata3 <- merge(metadata,metadata2,by.x="animalCode",by.y="animal_code")
metadata <- cbind(sampleNames,sampleType,animalCode)
metadata2 <- read.csv("metadata.txt",header=TRUE,sep="\t")
metadata3 <- merge(metadata,metadata2,by.x="animalCode",by.y="animal_code")
head(metadata3)
metadata4 <- metadata3[,c(2,1,3,4,5,6,7,8,9,10,11)]
head(metadata4)
write.table(genes,"transcriptomic_counts.tsv",sep="\t",quote=FALSE,row.names=FALSE,col.names=TRUE)
colnames(metadata4)[1] <- c("sampleName")
write.table(metadata4,"transcriptomic_metadata.tsv",sep="\t",quote=FALSE,row.names=FALSE,col.names=TRUE)
directory="/Users/anttonalberdi/github/holofood_chicken_transcriptomics/statistics/"
setwd(directory)
library("DESeq2")
library("RColorBrewer")
library("gplots")
library("devtools")
library("vegan")
library("hilldiv")
library("genefilter")
library("ggplot2")
library("grDevices")
gene_counts <- read.table("transcriptomics_counts.tsv",sep="\t",row.names=1,header=TRUE)
gene_counts[is.na(gene_counts)] <- 0
mean(colSums(gene_counts))
sd(colSums(gene_counts))
nrow(gene_counts)
install.packages("RIdeogram")
data(human_karyotype, package="RIdeogram")
head(human_karyotype)
human_karyotype
plot(gene_counts)
plot(colSums(gene_counts))
library(ggplot2)
ggplot(data=depths) +
geom_bar(stat="identity")
depths <- colSums(gene_counts)
library(ggplot2)
ggplot(data=depths) +
geom_bar(stat="identity")
depths <- cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts))
head(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")
depths <- depths[sort(depths$Depth),]
head(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
depths$Depth <- as.numeric(depths$Depth)
depths <- depths[order(depths$Depth),]
head(depths)
depths <- depths[rev(order(depths$Depth)),]
head(depths)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
hline(value=5000000)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000
)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
depths$Threshold <- depths$Depth
depths$Threshold[depths$Threshold > 5000000] <- 1
depths$Threshold[depths$Threshold < 5000000] <- 0
head(depths)
tail(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
depths$Depth <- as.numeric(depths$Depth)
depths$Threshold <- depths$Depth
head(depths)
depths$Threshold[depths$Threshold > 5000000] <- 1
head(depths)
depths$Threshold[depths$Threshold < 5000000] <- 0
head(depths)
depths$Depth <- as.numeric(depths$Depth)
depths$Threshold <- depths$Depth
depths$Threshold[depths$Threshold < 5000000] <- 0
depths$Threshold[depths$Threshold > 5000000] <- 1
depths <- depths[rev(order(depths$Depth)),]
head(depths)
tail(depths)
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
depths$Threshold <- as.character(as.factor(depths$Threshold))
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual(values = c("1" = "black", "0" = "orange"))
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggplot2)
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,fill=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,fill=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_minimal()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
length(depths)
ncol(gene_counts)
