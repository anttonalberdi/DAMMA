newlist <- list()
for(row in rows){
newlist[[row]] <- do.call("rbind", l[row,])
}
}
sweep_matrix_list <- function(matrix_list){
rows <- rownames(matrix_list[[1]])
newlist <- list()
for(row in rows){
newlist[row] <- do.call("rbind", l[row,])
}
}
rownames(matrix_list[[1]])
newlist[[row]] <- do.call("rbind", l[row,])
newlist <- list()
row="CC02.17F1a"
newlist[[row]] <- do.call("rbind", l[row,])
newlist[[row]] <- do.call("rbind", l[row,])
newlist[[row]] <- do.call("rbind", matrix_list[row,])
rows <- rownames(matrix_list[[1]])
newlist <- list()
for(row in rows){
newlist[[row]] <- do.call("rbind", matrix_list[row,])
}
newlist[[row]] <- do.call("rbind", matrix_list[row,])
newlist[[row]] <- do.call("rbind", matrix_list[[]][row,])
newlist[[row]] <- do.call("rbind", matrix_list[[]]][row,])
newlist[[row]] <- do.call("rbind", matrix_list[[]][row,])
matrix_list[[]][row,]
matrix_list[[row,]
matrix_list[][row,]
matrix_list[][row,]
matrix_list[]
names(matrix_list)
table <- tables[1]
tables
tables <- names(matrix_list)
table <- tables[1]
table
matrix_list[[table]]
matrix_list[[table]][row,]
newlist <- list()
for(row in rows){
for(table in tables){
newlist[[row]][table,] <- matrix_list[[table]][row,]
}
}
matrix_list[[table]][row,]
newlist[[row]][table,]
newlist[[row]][table,] <- matrix_list[[table]][row,]
newlist[[row]][table,]
class(newlist[[row]][table,])
rows <- rownames(matrix_list[[1]])
columns <- colnames(matrix_list[[1]])
tables <- names(matrix_list)
newlist <- lapply(length(rows), matrix, data=NA, nrow=length(tables), ncol=length(columns))
for(row in rows){
for(table in tables){
newlist[[row]][table,] <- matrix_list[[table]][row,]
}
}
newlist
length(rows)
length(newlist)
dim(newlist)
replicate(10, matrix("", 2, 5), simplify = F)
replicate(length(rows), matrix("", length(tables), length(columns)), simplify = F)
newlist <- replicate(length(rows), matrix(NA, length(tables), length(columns)), simplify = F)
for(row in rows){
for(table in tables){
newlist[[row]][table,] <- matrix_list[[table]][row,]
}
}
newlist <- replicate(length(rows), matrix(NA, length(tables), length(columns)), simplify = F)
names(newlist) <- tables
newlist
names(newlist) <- rows
newlist
for(row in rows){
for(table in tables){
colnames(newlist[[row]]) <- columns
rownames(newlist[[row]]) <- tables
newlist[[row]][table,] <- matrix_list[[table]][row,]
}
}
newlist
roxygenize()
roxygenize()
roxygenize()
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_expression_table2 <- sweep_matrix_list(distilled_expression_table)
distilled_expression_table2
distilled_expression_table2_compounds <- lapply(distilled_expression_table2,damma_compounds(x),functions_table)
functions_table
distilled_expression_table2_compounds <- lapply(distilled_expression_table2,damma_compounds(x,functions_table)
)
distilled_expression_table2_compounds <- lapply(distilled_expression_table2,function(x) damma_compounds(x,functions_table))
distilled_expression_table2_compounds
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
sample="CB20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds$sample)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
distilled_expression_table2_compounds$sample
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
distilled_expression_table2_compounds[[sample]]
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
sample="CC20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
distilled_table <- damma(gene_annotations,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
completeness <- as.data.frame(genome_quality[,c(1:2)])
distilled_table_corrected <- damma_correction(distilled_table,completeness)
distilled_table_compounds <- damma_compounds(distilled_table,functions_table)
#Prepare input table
compounds_table_df <- melt(distilled_table_compounds)
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
sample="CC20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
#Prepare input table
sample="CC20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
#Prepare input table
sample="CC20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Expression, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
sample="CB20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Expression, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=log(Expression), group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
compounds_table_df$Expression <- log(compounds_table_df$Expression)
head(compounds_table_df)
compounds_table_df$Expression[compounds_table_df$Expression == "-Inf"] <- 0
head(compounds_table_df)
#Prepare input table
sample="CB20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df$Expression <- log(compounds_table_df$Expression)
compounds_table_df$Expression[compounds_table_df$Expression == "-Inf"] <- 0
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Expression, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
sample="CB20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df$Expression <- log(compounds_table_df$Expression)
compounds_table_df$Expression[compounds_table_df$Expression == "-Inf"] <- 0
compounds_table_df$Expression[compounds_table_df$Expression < 0] <- 0
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Expression, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
sample="CC20.13F1a"
compounds_table_df <- melt(distilled_expression_table2_compounds[[sample]])
colnames(compounds_table_df) <- c("MAGs","Compounds","Expression")
compounds_table_df$Expression <- log(compounds_table_df$Expression)
compounds_table_df$Expression[compounds_table_df$Expression == "-Inf"] <- 0
compounds_table_df$Expression[compounds_table_df$Expression < 0] <- 0
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=MAGs, y=Compounds, fill=Expression, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
head(distilled_table)
head(functions_table)
functions_table2 <- functions_table %>%
select(c('Cope', 'Compound'))
library(dplyr)
functions_table2 <- functions_table %>%
select(c('Cope', 'Compound'))
functions_table2
functions_table2 <- functions_table %>%
select(c('Code', 'Compound'))
functions_table2
distilled_table2 <- as.data.frame(distilled_table)
head(distilled_table2)
as.data.frame(distilled_table) %>%
rownames_to_column('Genomes') %>%
pivot_longer(2:length(.), names_to = 'Genomes', values_to = 'fullness')
library(tidyr)
head(as.data.frame(distilled_table) %>%
rownames_to_column('Genomes') %>%
pivot_longer(2:length(.), names_to = 'Genomes', values_to = 'fullness'))
library(tidyverse)
head(as.data.frame(distilled_table) %>%
rownames_to_column('Genomes') %>%
pivot_longer(2:length(.), names_to = 'Genomes', values_to = 'fullness'))
head(as.data.frame(distilled_table) %>%
rownames_to_column('Genomes'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
pivot_longer(2:length(.), names_to = 'Code', values_to = 'fullness'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functiontable, by = 'Code'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code'))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
select(-Compound)
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound)
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise_each(~sum(-Compound))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
across(~sum(-Compound))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
(across(where(is.numeric), ~ max(.x, na.rm = TRUE))))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
(across(where(is.numeric), ~ max(.x, na.rm = TRUE)))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE)))
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
column_to_rownames('Compound')
distilled_table2
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
column_to_rownames('Compound') %>%
arrange(factor(name, levels = functions_table2$Compound))
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = functions_table2$Compound)) %>%
column_to_rownames('Compound'
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = functions_table2$Compound)) %>%
column_to_rownames('Compound')
functions_table2$Compound
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table2$Compound))) %>%
column_to_rownames('Compound')
distilled_table2
head(distilled_table)
head(distilled_table_compounds)
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table[,c('Code', 'Compound')], by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table$Compound))) %>%
column_to_rownames('Compound')
distilled_table2
compounds_table <- t(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table[,c('Code', 'Compound')], by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table$Compound))) %>%
column_to_rownames('Compound'))
compounds_table
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
if(transform == TRUE){
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
}else{
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
}
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
functions_table <- t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
functions_table
functions_table <- t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
}
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function')
head(functions_table)
data(damma_data)
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
©
library(DAMMA)
functions_table
head(gene_annotations)
library(roxygen2)
roxygenise()
detach_package(DAMMA)
remove.packages("DAMMA")
