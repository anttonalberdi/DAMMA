}
}
}
#Aggregate IDs
annotations_expression_Genome_agg <- aggregate(annotations_expression_Genome_sub[,c(3:(ncol(annotations_expression_Genome_sub)-1))],by=list(annotations_expression_Genome_sub[,1]),FUN=sum)
colnames(annotations_expression_Genome_agg)[1] <- "ID"
if(nrow(annotations_expression_Genome_agg)>0){
expression_MCI_table <- rbind(expression_MCI_table,annotations_expression_Genome_agg)
}
}
}
rownames(expression_MCI_table) <- expression_MCI_table[,1]
expression_MCI_table <- expression_MCI_table[,-1]
expression_MCI_table
#Subset annotation data for the specific Genome
annotations_Genome <- annotation_table[annotation_table[,genomecol] == Genome,]
#Declare expression table
expression_MCI_table <- data.frame()
#KEGG identifiers
if(!missing(keggcol)){
cat("\t\tProcessing KEGG annotations...\n", sep = "")
kegg <- str_extract(c(unlist(c(annotations_Genome[,keggcol]))), "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_Genome[grep(k, annotations_Genome[,c(keggcol)]),genecol]
expression_kegg <- expression_table[genes,]
if(dim(expression_kegg)[1]>1){
expression_kegg <- colSums(expression_kegg,na.rm=TRUE)
expression_kegg <- t(expression_kegg)
rownames(expression_kegg) <- k
expression_MCI_table <- rbind(expression_MCI_table,expression_kegg)
}
}
}
#Enzyme Commission codes
if(!missing(eccol)){
cat("\t\tProcessing EC annotations...\n", sep = "")
EC <- unlist(str_match_all(c(unlist(c(annotations_Genome[,eccol]))), "(?<=\\[EC:).+?(?=\\])")) #Extract ECs
EC <- unique(unlist(strsplit(EC, " "))) #Dereplicate
EC <- EC[!grepl("-", EC, fixed = TRUE)] #Remove ambiguous codes
EC <- sort(EC[grepl(".", EC, fixed = TRUE)]) #Remove NAs and inproperly formatted codes and sort codes
for(e in EC){
genes <- annotations_Genome[grep(e, annotations_Genome[,c(eccol)]),genecol]
expression_EC <- expression_table[genes,]
if(dim(expression_EC)[1]>1){
expression_EC <- colSums(expression_EC,na.rm=TRUE)
expression_EC <- t(expression_EC)
rownames(expression_EC) <- e
expression_MCI_table <- rbind(expression_MCI_table,expression_EC)
}
}
}
#Peptidases
if(!missing(pepcol)){
cat("\t\tProcessing peptidase annotations...\n", sep = "")
pep <- unique(c(unlist(c(annotations_Genome[,pepcol]))))
pep <- pep[pep != ""]
for(p in pep){
genes <- annotations_Genome[grep(p, annotations_Genome[,c(pepcol)]),genecol]
expression_pep <- expression_table[genes,]
if(dim(expression_pep)[1]>1){
expression_pep <- colSums(expression_pep,na.rm=TRUE)
expression_pep <- t(expression_pep)
rownames(expression_pep) <- p
expression_MCI_table <- rbind(expression_MCI_table,expression_pep)
}
}
}
expression_MCI_table
expression_MCI_table[sort(expression_MCI_table)]
expression_MCI_table[order(rownames(expression_MCI_table)),]
setwd("/Users/anttonalberdi/github/holofood_damma_metatranscriptomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
gene_expression <- fread("gene_expression_caecum.tsv")
#Chunk analysis to sets of 100 MAGs
MAGs <- sort(unique(gene_expression$MAG))
gene_expression_1 <- gene_expression[gene_expression$MAG %in% MAGs[c(1:100)],]
gene_expression_2 <- gene_expression[gene_expression$MAG %in% MAGs[c(101:200)],]
gene_expression_3 <- gene_expression[gene_expression$MAG %in% MAGs[c(201:300)],]
gene_expression_4 <- gene_expression[gene_expression$MAG %in% MAGs[c(301:400)],]
gene_expression_5 <- gene_expression[gene_expression$MAG %in% MAGs[c(401:500)],]
gene_expression_6 <- gene_expression[gene_expression$MAG %in% MAGs[c(501:600)],]
gene_expression_7 <- gene_expression[gene_expression$MAG %in% MAGs[c(601:700)],]
gene_expression_8 <- gene_expression[gene_expression$MAG %in% MAGs[c(701:825)],]
genome_annotations <- fread("genome_annotations_caecum.tsv")
gene_expression_1 <- as.data.frame(gene_expression_1[,c(1:128)])
rownames(gene_expression_1) <- gene_expression_1[,1]
gene_expression_1 <- gene_expression_1[,-1]
distilled_expression_caecum_1 <- damma_expression(gene_expression_1,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_1,file="distilled_caecum_1.RData")
load_all('/Users/anttonalberdi/github/DAMMA')
gene_expression_1 <- as.data.frame(gene_expression_1[,c(1:128)])
rownames(gene_expression_1) <- gene_expression_1[,1]
gene_expression_1 <- gene_expression_1[,-1]
distilled_expression_caecum_1 <- damma_expression(gene_expression_1,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_1,file="distilled_caecum_1.RData")
head(gene_expression_1)
head(as.data.frame(gene_expression_1[,c(1:128)]))
gene_expression_1 <- gene_expression[gene_expression$MAG %in% MAGs[c(1:100)],]
head(gene_expression_1)
gene_expression_1 <- as.data.frame(gene_expression_1[,c(1:128)])
rownames(gene_expression_1) <- gene_expression_1[,1]
gene_expression_1 <- gene_expression_1[,-1]
head(gene_expression_1)
distilled_expression_caecum_1 <- damma_expression(gene_expression_1,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_1,file="distilled_caecum_1.RData")
ยบ
colSums(gene_expression)
head(gene_expression)
colSums(gene_expression[,c(2:128)])
hist(colSums(gene_expression[,c(2:128)]))
require(compcodeR)รง
require(compcodeR)
install.packages(compcodeR)
install.packages("compcodeR")
require(compcodeR)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("compcodeR")
head(gene_expression)
ngenes <- 1000
nsamples <- 4
Counts <- matrix(rnbinom(ngenes*nsamples,mu=5,size=2),ngenes,nsamples)
rownames(Counts) <- 1:ngenes
head(Counts)
Counts
y <- DGEList(counts=Counts, group=rep(1:2,each=2))
library(edgeR)
y <- DGEList(counts=Counts, group=rep(1:2,each=2))
y
ep(1:2,each=2)
library(edgeR)
y <- DGEList(counts=gene_expression_1[,c(2:128)])
y <- DGEList(counts=gene_expression[,c(2:128)])
y
head(gene_expression)
head(genome_annotations)
gene_sizes <- genome_annotations$end_position - genome_annotations$start_position
head(gene_sizes)
names(gene_sizes) <- genome_annotations[,1]
head(gene_sizes)
head(genome_annotations[,1])
length(gene_sizes)
nrow(genome_annotations[,1])
class(genome_annotations[,1])
head(as.character(genome_annotations[,1]))
gene_lengths <- t(t(genome_annotations$end_position - genome_annotations$start_position))
head(gene_lengths)
rownames(gene_lengths) <- genome_annotations[,1]
rownames(gene_lengths)
nrow(gene_lengths)
genome_annotations$gene_length <- genome_annotations$end_position - genome_annotations$start_position
head(genome_annotations)
genome_annotations$correction_factor <- median(genome_annotations$gene_length)/genome_annotations$gene_length
head(genome_annotations)
head(gene_expression[,c(2:128)])
gene_expression[,c(2:128)] <- round(sweep(gene_expression[,c(2:128)], MARGIN = 1, genome_annotations$correction_factor, `*`), 0)
head(gene_expression[,c(2:128)])
head(gene_expression)
gene_expression <- fread("gene_expression_caecum.tsv")[,c(2:128)])
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression <- gene_expression[,c(2:128)])
rownames(gene_expression) <- gene_expression[,1]
gene_expression <- gene_expression[,-1]
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression <- gene_expression[,c(2:128)]
rownames(gene_expression) <- gene_expression[,1]
gene_expression <- gene_expression[,-1]
head(gene_expression)
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression <- gene_expression[,c(1:128)]
rownames(gene_expression) <- gene_expression[,1]
gene_expression <- gene_expression[,-1]
head(gene_expression_1)
colSums(gene_expression_1)
x <- read.csv("https://reneshbedre.github.io/assets/posts/gexp/df_sc.csv",row.names="gene")
x
rpk <- ( (x[,1:6]*10^3 )/x[,7])
rpk
head(gene_expression)
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression <- gene_expression[,c(1:128)]
head(gene_expression)
genome_annotations <- fread("genome_annotations_caecum.tsv")
genome_annotations$gene_length <- genome_annotations$end_position - genome_annotations$start_position
genome_annotations$correction_factor <- median(genome_annotations$gene_length)/genome_annotations$gene_length
head(genome_annotations)
gene_expression_cor <- merge(gene_expression,genome_annotations[,c("V1","correction_factor")],by.x="Contig",by.y="V1")
head(gene_expression_cor)
gene_expression_cor <- merge(gene_expression,genome_annotations[,c("V1","gene_length")],by.x="Contig",by.y="V1")
gene_expression_cor[,c(2:128)] <- gene_expression_cor[,c(2:128)]/(gene_expression_cor$gene_length/1000)
head(gene_expression_cor)
y <- calcNormFactors(y)
head(y)
y <- DGEList(counts=gene_expression_cor[,c(2:128)],genes = gene_expression_cor[,1])
y
y <- calcNormFactors(y)
norm_counts <- cpm(y)
head(norm_counts)
head(gene_expression_cor)
gene_expression_cor <- as.data.frame(gene_expression_cor)
rownames(gene_expression_cor) <- gene_expression_cor[,1]
head(gene_expression_cor)
gene_expression_cor <- gene_expression_cor[,c(2:128)]
head(gene_expression_cor)
y <- DGEList(counts=gene_expression_cor[,c(2:128)])
y <- calcNormFactors(y)
norm_counts <- cpm(y)
y <- DGEList(counts=gene_expression_cor)
y <- calcNormFactors(y)
norm_counts <- cpm(y)
head(norm_counts)
head(genome_annotations)
norm_counts_MAG <- merge(norm_counts,genome_annotations[,c("V1","gene_length")],by.x="row.names",by.y="fasta")
head(norm_counts)
head(genome_annotations[,c("V1","gene_length")])
norm_counts_MAG <- merge(norm_counts,genome_annotations[,c("V1","fasta")],by.x="row.names",by.y="fasta")
head(norm_counts_MAG)
norm_counts_MAG <- merge(norm_counts,genome_annotations[,c("V1","fasta")],by.x="row.names",by.y="V1")
head(norm_counts_MAG)
rownames(norm_counts_MAG) <- norm_counts_MAG[,1]
norm_counts_MAG <- norm_counts_MAG[,-1]
head(norm_counts_MAG)
gene_expression_1 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(1:100)],c(1:128)]
gene_expression_2 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(101:200)],c(1:128)]
gene_expression_3 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(201:300)],c(1:128)]
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:128)]
gene_expression_5 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(401:500)],c(1:128)]
gene_expression_6 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(501:600)],c(1:128)]
gene_expression_7 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(601:700)],c(1:128)]
gene_expression_8 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(701:825)],c(1:128)]
head(gene_expression_1)
ncol(gene_expression_1)
gene_expression_1 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(1:100)],c(1:127)]
gene_expression_2 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(101:200)],c(1:127)]
gene_expression_3 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(201:300)],c(1:127)]
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:127)]
gene_expression_5 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(401:500)],c(1:127)]
gene_expression_6 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(501:600)],c(1:127)]
gene_expression_7 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(601:700)],c(1:127)]
gene_expression_8 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(701:825)],c(1:127)]
head(gene_expression_1)
colSums(gene_expression_1)
hist(gene_expression_1[,-1])
hist(gene_expression_1[,1])
gene_expression_1[,1]
distilled_expression_caecum_1 <- damma_expression(gene_expression_1,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_1,file="distilled_caecum_1.RData")
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_expression_caecum_1 <- damma_expression(gene_expression_1,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_1,file="distilled_caecum_1.RData")
distilled_expression_caecum_2 <- damma_expression(gene_expression_2,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_2,file="distilled_caecum_2.RData")
distilled_expression_caecum_3 <- damma_expression(gene_expression_3,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_3,file="distilled_caecum_3.RData")
head(distilled_expression_caecum_1)
distilled_expression_caecum <- c(distilled_expression_caecum_1,distilled_expression_caecum_2,distilled_expression_caecum_3)
lenght(distilled_expression_caecum)
length(distilled_expression_caecum)
distilled_expression_caecum_merged <- Reduce("+", distilled_expression_caecum)
head(distilled_expression_caecum_merged)
distilled_expression_caecum_merged_compounds <- damma_compounds(distilled_expression_caecum_merged,pathway_table)
#Prepare input table
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Genomes","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Genomes, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Genomes","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Genomes, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
head(compounds_table_df)
#Prepare input table
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=log(MCI), group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max(log(MCI))), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
head(compounds_table_df2)
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
compounds_table_df2$MCI <- log(compounds_table_df2$MCI)
max=compounds_table_df2$MCI
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
max
max=max(compounds_table_df2$MCI)
max
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
head(compounds_table_df2)
compounds_table_df2$Samples
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 90))
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(element_text(angle = 90, vjust = 0.5, hjust=1))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
head(pathway_table)
compounds_table_df2 <- merge(compounds_table_df,unique(pathway_table[,c("Compounds","Function")]),by.x="Compounds",by.y="Compound")
compounds_table_df2 <- merge(compounds_table_df,unique(pathway_table[,c("Compound","Function")]),by.x="Compounds",by.y="Compound")
head(compounds_table_df2)
sort(compounds_table_df2$Samples)
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,unique(pathway_table[,c("Compound","Function")]),by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Samples <- as.factor(compounds_table_df2$Samples)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
compounds_table_df2$Samples <- factor(compounds_table_df2$Samples, levels=sort(compounds_table_df2$Samples))
compounds_table_df2$MCI <- log(compounds_table_df2$MCI)
max=max(compounds_table_df2$MCI)
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
compounds_table_df2$Samples
compounds_table_df2$Samples <- factor(compounds_table_df2$Samples, levels=as.character(sort(compounds_table_df2$Samples)))
as.character(sort(compounds_table_df2$Samples)
)
compounds_table_df2$Samples <- factor(compounds_table_df2$Samples, levels=as.character(sort(unique(compounds_table_df2$Samples))))
compounds_table_df2$Samples
compounds_table_df2$Samples <- factor(compounds_table_df2$Samples, levels=as.character(sort(unique(compounds_table_df2$Samples))))
compounds_table_df2$Samples
head(distilled_expression_caecum_merged_compounds)
distilled_expression_caecum_merged_compounds <- distilled_expression_caecum_merged_compounds[sort(distilled_expression_caecum_merged_compounds),]
distilled_expression_caecum_merged_compounds <- distilled_expression_caecum_merged_compounds[sort(rownames(distilled_expression_caecum_merged_compounds)),]
head(distilled_expression_caecum_merged_compounds)
#Prepare input table
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,unique(pathway_table[,c("Compound","Function")]),by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
compounds_table_df2$MCI <- log(compounds_table_df2$MCI)
max=max(compounds_table_df2$MCI)
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
compounds_table_df2$MCI
compounds_table_df2$MCI[which(!is.finite(compounds_table_df2$MCI))] <- 0
compounds_table_df2$MCI
max=max(compounds_table_df2$MCI)
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
min(max(compounds_table_df2$MCI))
min((compounds_table_df2$MCI))
max=max(compounds_table_df2$MCI)
min=min(compounds_table_df2$MCI)
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(min,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
distilled_expression_caecum_4 <- damma_expression(gene_expression_3,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_4,file="distilled_caecum_4.RData")
distilled_expression_caecum_5 <- damma_expression(gene_expression_3,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_5,file="distilled_caecum_5.RData")
distilled_expression_caecum <- c(distilled_expression_caecum_1,distilled_expression_caecum_2,distilled_expression_caecum_3,distilled_expression_caecum_4,distilled_expression_caecum_5)
#Merge all MAGs
distilled_expression_caecum_merged <- Reduce("+", distilled_expression_caecum)
#Aggregate to compounds
distilled_expression_caecum_merged_compounds <- damma_compounds(distilled_expression_caecum_merged,pathway_table)
distilled_expression_caecum_merged_compounds <- distilled_expression_caecum_merged_compounds[sort(rownames(distilled_expression_caecum_merged_compounds)),]
#Prepare input table
compounds_table_df <- melt(distilled_expression_caecum_merged_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,unique(pathway_table[,c("Compound","Function")]),by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
compounds_table_df2$MCI <- log(compounds_table_df2$MCI)
compounds_table_df2$MCI[which(!is.finite(compounds_table_df2$MCI))] <- 0
max=max(compounds_table_df2$MCI)
min=min(compounds_table_df2$MCI)
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(min,max), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
head(distilled_expression_caecum_merged)
compounds <- colnames(distilled_expression_caecum_merged_compounds)
compounds
values <- distilled_expression_caecum_merged_compounds[,c]
c"Cobalamin (B12)"
c="Cobalamin (B12)"
nrow(distilled_expression_caecum_merged_compounds)
rownames(distilled_expression_caecum_merged_compounds)
"CC" %in% rownames(distilled_expression_caecum_merged_compounds)
grep("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE)
grepl("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE)
cbind(!grepl("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE),grepl("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE))
rownames(design) <- rownames(distilled_expression_caecum_merged_compounds)
colnames(design) <- c("AB","C")
design <- cbind(!grepl("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE),grepl("CC",rownames(distilled_expression_caecum_merged_compounds),fixed=TRUE))
rownames(design) <- rownames(distilled_expression_caecum_merged_compounds)
colnames(design) <- c("AB","C")
head(design)
design[is.true(design)] <- 1
design[design == TRUE] <- 1
head(design)
tail(design)
fit <- glmQLFit(distilled_expression_caecum_merged_compounds, design)
fit <- glmQLFit(t(distilled_expression_caecum_merged_compounds), design)
