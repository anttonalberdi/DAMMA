rownames_to_column('Genomes'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
pivot_longer(2:length(.), names_to = 'Code', values_to = 'fullness'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functiontable, by = 'Code'))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code'))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
select(-Compound)
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound)
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise_each(~sum(-Compound))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
across(~sum(-Compound))
head(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
(across(where(is.numeric), ~ max(.x, na.rm = TRUE))))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
(across(where(is.numeric), ~ max(.x, na.rm = TRUE)))
as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE)))
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
column_to_rownames('Compound')
distilled_table2
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
column_to_rownames('Compound') %>%
arrange(factor(name, levels = functions_table2$Compound))
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = functions_table2$Compound)) %>%
column_to_rownames('Compound'
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = functions_table2$Compound)) %>%
column_to_rownames('Compound')
functions_table2$Compound
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table2, by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table2$Compound))) %>%
column_to_rownames('Compound')
distilled_table2
head(distilled_table)
head(distilled_table_compounds)
distilled_table2 <- as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table[,c('Code', 'Compound')], by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table$Compound))) %>%
column_to_rownames('Compound')
distilled_table2
compounds_table <- t(as.data.frame(t(distilled_table)) %>%
rownames_to_column('Code') %>%
left_join(functions_table[,c('Code', 'Compound')], by = 'Code') %>%
group_by(Compound) %>%
summarise(across(where(is.numeric), ~ max(.x, na.rm = TRUE))) %>%
arrange(factor(Compound, levels = unique(functions_table$Compound))) %>%
column_to_rownames('Compound'))
compounds_table
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
if(transform == TRUE){
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
}else{
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
}
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
functions_table <- t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
functions_table
functions_table <- t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
}
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function')
head(functions_table)
data(damma_data)
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
t(as.data.frame(t(compounds_table)) %>%
rownames_to_column('Compound') %>%
left_join(functions_table[,c('Compound', 'Function')], by = 'Compound') %>%
group_by(Function) %>%
summarise(across(where(is.numeric), ~ sum(.x, na.rm = TRUE))) %>%
arrange(factor(Function, levels = unique(functions_table$Function))) %>%
column_to_rownames('Function'))
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
Â©
library(DAMMA)
functions_table
head(gene_annotations)
library(roxygen2)
roxygenise()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(DAMMA)
distilled_table <- damma(gene_annotations,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_table <- damma(gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
warnings()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(roxygen2)
roxygenize()
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(DAMMA)
distilled_table <- damma(gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
completeness <- as.data.frame(genome_quality[,c(1:2)])
distilled_table_corrected <- damma_correction(distilled_table,completeness)
distilled_table_compounds <- damma_compounds(distilled_table,functions_table)
library(roxygen2)
roxygenize()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
load_all('/Users/anttonalberdi/github/DAMMA')
roxygenize()
library(roxygen2)
roxygenize()
library(roxygen2)
roxygenize()
library(roxygen2)
roxygenize()
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
library(DAMMA)
distilled_table <- damma(gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_table <- damma(gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_table <- damma(gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_table_corrected <- damma_correction(distilled_table,completeness)
completeness <- as.data.frame(genome_quality[,c(1:2)])
distilled_table_corrected <- damma_correction(distilled_table,completeness)
distilled_table_compounds <- damma_compounds(distilled_table,functions_table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_table_compounds <- damma_compounds(distilled_table,functions_table)
library(roxygen2)
roxygenize()
load_all('/Users/anttonalberdi/github/DAMMA')
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_table_compounds <- damma_compounds(distilled_table,functions_table)
distilled_table_compounds_bin <- damma_bin(distilled_table_compounds,threshold=0.9)
distilled_table_compounds_bin <- damma_binary(distilled_table_compounds,threshold=0.9)
distilled_table_functions <- damma_functions(distilled_table_compounds,functions_table,normalise=FALSE)
distilled_table_functions_bin <- aggregate_functions(distilled_table_compounds_bin,functions_table,normalise=TRUE)
distilled_table_functions <- damma_functions(distilled_table_compounds,functions_table,transform=FALSE)
distilled_table_functions_bin <- aggregate_functions(distilled_table_compounds_bin,functions_table,transform=TRUE)
distilled_table_functions_bin <- damma_functions(distilled_table_compounds_bin,functions_table,transform=TRUE)
distilled_table
fullness_table2 <- distilled_table
head(fullness_table)
annotations=gene_annotations
abundance_table=genome_counts
fullness_table=distilled_table
genomecol=2
keggcol=9
eccol=c(10,19)
pepcol=12
tss <- function(abund){sweep(abund, 2, colSums(abund), FUN="/")}
#Prepare tables
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
fullness_table2 <- as.data.frame(fullness_table)
head(fullness_table2)
head(functions_table2)
functions_table2$Code
#Compute overall community-level fullness table
cat("Computing overall community-level MCIs...\n")
cat("\tExtracting annotations...\n")
#K00000
kegg <- str_extract(annotations2$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
#[EC:0.0.0.0]
EC <- unlist(str_match_all(annotations2$E1, "(?<=\\[EC:).+?(?=\\])"))
EC <- unique(unlist(strsplit(EC, " ")))
EC <- EC[!grepl("-", EC, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations2$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
#Peptidases
pep <- unique(annotations2$P1)
pep <- pep[pep != ""]
#Concatenate all annotations
present <- unique(c(kegg,EC,EC2,pep))
#Compute fullness scores
cat("\tCalculatting fullness scores...\n")
community_fullness_vector <- c()
suppressWarnings(
for(f in c(1:nrow(functions_table2))){
definition=functions_table2[f,"Definition"]
fullness <- compute_fullness(definition,present)
community_fullness_vector <- c(community_fullness_vector,fullness)
}
)
names(community_fullness_vector) <-  functions_table2$Code
head(community_fullness_vector)
community_fullness_vector
community_fullness_vector[is.na(community_fullness_vector)] <- 0
community_fullness_vector
cat("Weighing fullness scores by relative abundances...\n")
abundance_table2 <- tss(as.data.frame(abundance_table))
samples <- colnames(abundance_table)
head(abundance_table)
rownames(abundance_table) <- abundance_table[,1]
abundance_table <- abundance_table[,-1]
head(abundance_table)
abundance_table2 <- tss(as.data.frame(abundance_table))
heads(abundance_table2)
head(abundance_table2)
samples <- colnames(abundance_table)
samples
community_table <- c()
for(s in samples){
relabun <- abundance_table2[,s]
weigedfullness <- sweep(fullness_table2, 1, relabun, FUN = "*")
community_row <- colSums(weigedfullness) * community_fullness_vector
community_table <- rbind(community_table,community_row)
}
rownames(community_table) <- samples
community_table
community_table <- colMeans(fullness_table2) * community_fullness_vector
community_table
library(roxygen2)
roxygenize()
library(roxygen2)
roxygenize()
load_all('/Users/anttonalberdi/github/DAMMA')
community_fullness <- damma_community(annotations=gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness <- damma_community(annotations=gene_annotations,functions_table,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness <- damma_community(annotations=gene_annotations,functions_table,abundance_table=genome_counts,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
abundance_table <- genome_counts[,-1]
rownames(abundance_table) <- genome_counts[,1]
head(abundance_table)
community_fullness <- damma_community(annotations=gene_annotations,functions_table,abundance_table=abundance_table,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness_compounds <- damma_compounds(community_fullness,functions_table)
community_fullness_compounds
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
functions_table_df <- melt(community_fullness_compounds)
colnames(functions_table_df) <- c("Samples","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=Samples, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
functions_table_df <- melt(community_fullness_compounds)
colnames(functions_table_df) <- c("Samples","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=Samples, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(community_fullness_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
#Prepare input table
compounds_table_df <- melt(community_fullness_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
roxygenise()
annotations=gene_annotations
functions_table
expression=gene_expression
genecol=1
genomecol=2
keggcol=9
eccol=c(10,19)
pepcol=12
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
head(annotations2)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
head(annotations2)
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
fullness_table_list2
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
Genomes
annotations2$Genes
sharedgenes
rownames(expression)
head(expression)
expression=gene_expression[,-1]
rownames(expression)=gene_expression[,1]
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
head(annotations3)
class(annotations3)
Genomes
annotations3$Genomes
Genomes <- unique(annotations3$Genomes)
Genomes
head(annotations3)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
head(annotations_Genome)
Genome="ERR4304450bin.69"
cat("\t",Genome," (",m,"/",length(Genomes),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch Genome annotations
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
annotations_Genome
#Simplify annotations table
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
