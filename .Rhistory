head(expression_table)
head(expression2)
head(expression_table)
#Calculate expression values for each MAG
cat("Calculating function expression values for MAG:\n")
m=0
expression_fullness_table_list <- list()
for(MAG in MAGs){
m=m+1
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch MAG annotations
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
annotations_MAG <- annotations_MAG[order(annotations_MAG$K1),]
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_MAG <- annotations_MAG[order(annotations_MAG$E1,annotations_MAG$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_MAG <- annotations_MAG[order(annotations_MAG$P1),]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
cat(expression_table[c(1:6),c(5:8)],"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
#Convert sample list to matrix
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions$Code
#Append to MAG list
expression_fullness_table_list[[MAG]] <- expression_fullness_table
}
expression_table[c(1:6),c(5:8)]
class(expression_table[c(1:6),c(5:8)])
cat(expression_table[c(1:6),c(5:8)],"\n")
testinfo <- expression_table[c(1:6),c(5:8)]
cat(testinfo,"\n")
print(testinfo,"\n")
print(testinfo)
cat(testinfo)
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
print(expression_table[c(1:6),c(5:8)])
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
#Calculate expression values for each MAG
cat("Calculating function expression values for MAG:\n")
m=0
expression_fullness_table_list <- list()
for(MAG in MAGs){
m=m+1
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch MAG annotations
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
annotations_MAG <- annotations_MAG[order(annotations_MAG$K1),]
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_MAG <- annotations_MAG[order(annotations_MAG$E1,annotations_MAG$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_MAG <- annotations_MAG[order(annotations_MAG$P1),]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
print(expression_table[c(1:6),c(5:8)])
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
#Convert sample list to matrix
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions$Code
#Append to MAG list
expression_fullness_table_list[[MAG]] <- expression_fullness_table
}
#Calculate expression values for each MAG
cat("Calculating function expression values for MAG:\n")
m=0
expression_fullness_table_list <- list()
for(MAG in MAGs){
m=m+1
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch MAG annotations
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
annotations_MAG <- annotations_MAG[order(annotations_MAG$K1),]
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_MAG <- annotations_MAG[order(annotations_MAG$E1,annotations_MAG$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_MAG <- annotations_MAG[order(annotations_MAG$P1),]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
print(expression_table[c(1:6),c(5:8)])
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
#Convert sample list to matrix
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions$Code
#Append to MAG list
expression_fullness_table_list[[MAG]] <- expression_fullness_table
}
head(annotations3)
#Calculate expression values for each MAG
cat("Calculating function expression values for MAG:\n")
m=0
expression_fullness_table_list <- list()
for(MAG in MAGs){
m=m+1
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch MAG annotations
expression_table <- data.frame()
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
annotations_MAG <- annotations_MAG[order(annotations_MAG$K1),]
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_MAG <- annotations_MAG[order(annotations_MAG$E1,annotations_MAG$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_MAG <- annotations_MAG[order(annotations_MAG$P1),]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
print(expression_table[c(1:6),c(5:8)])
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
#Convert sample list to matrix
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions$Code
#Append to MAG list
expression_fullness_table_list[[MAG]] <- expression_fullness_table
}
expression_fullness_table_list
lappy(expression_fullness_table_list,FUN=sum)
lapply(expression_fullness_table_list,FUN=sum)
caecum_counts <- read.csv("/Users/anttonalberdi/Downloads/metagenome_counts_caecum.csv",sep=";")
head(caecum_counts)
colSums(caecum_counts)
sort(colSums(caecum_counts))
sort(rowSums(tss(caecum_counts))
)
mags<-c("ERR4836887_bin.54","ERR4968581_bin.26","ERR4968588_bin.12","ERR4304450bin.69","ERR4836908_bin.60","ERR4836889_bin.9","ERR4835994_bin.4","ERR4836949_bin.36")
samples<-c("CC02.17","CC03.15","CC06.09","CC20.13","CB21.03","CB05.15","CB07.01","CB20.13")
caecum_counts[rownames(caecum_counts) %in% mags, colnames(caecum_counts) %in% samples]
subset <- caecum_counts[rownames(caecum_counts) %in% mags, colnames(caecum_counts) %in% samples]
tss(subset)
write.tsv(subset,"/Users/anttonalberdi/Downloads/mag_counts.tsv",quote=FALSE,rownames=TRUE,colnames=TRUE)
write.table(subset,"/Users/anttonalberdi/Downloads/mag_counts.tsv",quote=FALSE,rownames=TRUE,colnames=TRUE,sep="\t")
write.table(subset,"/Users/anttonalberdi/Downloads/mag_counts.tsv",quote=FALSE,row.names=TRUE,col.names=TRUE,sep="\t")
quality <- read.csv("/Users/anttonalberdi/Downloads/bin_quality_caecum.csv",sep=";")
head(quality)
quality <- quality[quality[,1] %in% mags,]
quality
write.table(quality,"/Users/anttonalberdi/Downloads/mag_quality.tsv",quote=FALSE,row.names=FALSE,col.names=TRUE,sep="\t")
expression_annot <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts_annot.txt")
expression_annot <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts_annot.tsv")
head(expression_annot)
expression_annot <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts_annot.tsv",sep="\t")
expression_annot <- read.table("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts_annot.tsv",sep="\t")
colnames(expression_annot)
head(expression_annot)
head(expression)
expression_sub <- expression[,colnames(expression) %in% samples]
head(expression_sub)
expression_sub <- expression[,colnames(expression) %in% paste0(samples,"F1a")]
head(expression_sub)
colnames(expression_sub)
pattern <- paste(mags, collapse="|")
pattern
expression_sub2 <- data.table(expression_sub, result=grepl(pattern, expression_sub))
head(expression_sub2)
nrow(expression_sub2)
nrow(expression_sub2)
nrow(expression_sub)
rownames(expression_sub2) <- rownames(expression_sub)
head(expression_sub2)
class(expression_sub2)
expression_sub2 <- as.data.frame(expression_sub2)
head(expression_sub2)
rownames(expression_sub2) <- rownames(expression_sub)
head(expression_sub2)
expression_sub3 <- expression_sub3[expression_sub3$result == TRUE]
expression_sub3 <- expression_sub2[expression_sub2$result == TRUE]
nrow(expression_sub3)
head(expression_sub3)
expression_sub3 <- expression_sub2[expression_sub2$result == TRUE,]
head(expression_sub3)
mags
table(expression_sub2$result)
genes <- rownames(expression_sub2)
head(genes)
genes2 <- genes[str_detect(genes,'pattern')]
length(genes2)
genes2 <- genes[str_detect(genes,pattern)]
length(genes2)
expression_sub3 <- expression_sub[rownames(expression_sub) %in% genes2,]
nrow(expression_sub3)
head(expression_sub3)
write.table(expression_sub3,"/Users/anttonalberdi/Downloads/gene_expression.tsv",row.names=TRUE,col.names=TRUE,sep="\t")
annot_caecum <- read.table("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/annotations_caecum.tsv",sep="\t")
gene_annotations <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2)
gene_annotations
gene_annotations[gene_annotations$MAG %in% mags,]
gene_annotations2 <- gene_annotations[gene_annotations$MAG %in% mags,]
write.table(gene_annotations2,"/Users/anttonalberdi/Downloads/gene_annotations.tsv",sep="\t")
write.table(gene_annotations2,"/Users/anttonalberdi/Downloads/gene_annotations.tsv",sep="\t",row.names=FALSE)
gene_annotations <- fread("data/gene_annotations.tsv")
gene_expression <- fread("data/gene_expression.tsv")
mag_counts <- fread("data/mag_counts.tsv")
mag_quality <- fread("data/mag_quality.tsv")
gene_expression <- fread("data/gene_expression.tsv")
mag_counts <- fread("data/mag_counts.tsv")
gene_annotations
gene_expression
mag_counts
mag_quality
gene_annotations <- fread("data/gene_annotations.tsv")
gene_expression <- fread("data/gene_expression.tsv")
mag_counts <- fread("data/mag_counts.tsv")
mag_quality <- fread("data/mag_quality.tsv")
functions_table_FD1 <- read.table("data/DAMMA_functions_FD1.tsv",header=TRUE,sep="\t")
functions_table_FD2 <- read.table("data/DAMMA_functions_FD2.tsv",header=TRUE,sep="\t")
functions_table_FD3 <- read.table("data/DAMMA_functions_FD3.tsv",header=TRUE,sep="\t")
functions_table_FD4 <- read.table("data/DAMMA_functions_FD4.tsv",header=TRUE,sep="\t")
functions_table_FD5 <- read.table("data/DAMMA_functions_FD5.tsv",header=TRUE,sep="\t")
#Use latest version as default
functions_table <- functions_table_FD5
save(functions_table,gene_annotations,gene_expression,mag_counts,mag_quality,
functions_table_FD1,
functions_table_FD2,
functions_table_FD3,
functions_table_FD4,
functions_table_FD5,
file="data/damma_data.RData")
gene_annotations <- fread("data/gene_annotations.tsv")
gene_expression <- fread("data/gene_expression.tsv")
genome_counts <- fread("data/genome_counts.tsv")
genome_quality <- fread("data/genome_quality.tsv")
functions_table_FD1 <- read.table("data/DAMMA_functions_FD1.tsv",header=TRUE,sep="\t")
functions_table_FD2 <- read.table("data/DAMMA_functions_FD2.tsv",header=TRUE,sep="\t")
functions_table_FD3 <- read.table("data/DAMMA_functions_FD3.tsv",header=TRUE,sep="\t")
functions_table_FD4 <- read.table("data/DAMMA_functions_FD4.tsv",header=TRUE,sep="\t")
functions_table_FD5 <- read.table("data/DAMMA_functions_FD5.tsv",header=TRUE,sep="\t")
#Use latest version as default
functions_table <- functions_table_FD5
save(functions_table,gene_annotations,gene_expression,genome_counts,genome_quality,
functions_table_FD1,
functions_table_FD2,
functions_table_FD3,
functions_table_FD4,
functions_table_FD5,
file="data/damma_data.RData")
load_all('/Users/anttonalberdi/github/DAMMA')
roxygenize()
load(damma_:da)
load(damma_data)
gene_annotations <- fread("data/gene_annotations.tsv")
gene_expression <- fread("data/gene_expression.tsv")
genome_counts <- fread("data/genome_counts.tsv")
genome_quality <- fread("data/genome_quality.tsv")
functions_table_FD1 <- read.table("data/DAMMA_functions_FD1.tsv",header=TRUE,sep="\t")
functions_table_FD2 <- read.table("data/DAMMA_functions_FD2.tsv",header=TRUE,sep="\t")
functions_table_FD3 <- read.table("data/DAMMA_functions_FD3.tsv",header=TRUE,sep="\t")
functions_table_FD4 <- read.table("data/DAMMA_functions_FD4.tsv",header=TRUE,sep="\t")
functions_table_FD5 <- read.table("data/DAMMA_functions_FD5.tsv",header=TRUE,sep="\t")
#Use latest version as default
functions_table <- functions_table_FD5
save(functions_table,gene_annotations,gene_expression,genome_counts,genome_quality,
functions_table_FD1,
functions_table_FD2,
functions_table_FD3,
functions_table_FD4,
functions_table_FD5,
file="data/damma_data.RData")
roxygenize()
