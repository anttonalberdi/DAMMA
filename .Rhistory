distilled_table_corrected <- damma_correction(distilled_table,mag_completeness)
distilled_table_corrected <- damma_correction(distilled_table,mag_completeness,stats=FALSE)
library(ggtree)
library(ggtreeExtra)
library(phyloseq)
library(dplyr)
library(ape)
#https://yulab-smu.top/treedata-book/chapter10.html
setwd("/Users/anttonalberdi/github/domesticat/")
MAGtree <- read.tree("data/MAG.tree")
MAGinfo <- read.csv("data/MAG_info.csv")
rownames(MAGinfo) <- MAGinfo[,1]
## ******************************************
# Import metadata
cat_metadata=read.csv("data/DomestiCAT_metadata.csv")
head(cat_metadata)
cat_metadata=cat_metadata[-c(96:98),]
cat_metadata$CombinedID=gsub("_",".",cat_metadata$CombinedID)
cat_metadata$CombinedID=gsub("-",".",cat_metadata$CombinedID)
cat_metadata$CombinedID=gsub(" ","",cat_metadata$CombinedID)
cat_metadata=cat_metadata[cat_metadata$Extraction.ID!="Blank",]
cat_metadata$Tame.Feral[grepl("Tame",cat_metadata$Tame.Feral)]="Tame"
table(cat_metadata$Tame.Feral)
table(cat_metadata$Location)
table(cat_metadata$Tame.Feral,cat_metadata$Location)
# Import MAG data
MAGcounts <- read.delim("data/DomestiCat_all_MAG_counts.txt", sep = '\t')
genomelength <- read.delim("data/DomestiCat_all_MAG_length.txt", sep = '\t')
MAGcounts[1:6,1:6]
genomelength[1:6,1:6]
# Proportion of GenomeID in two tables in same order
mean(MAGcounts$Genome==genomelength$Genome)
Genome_ID=MAGcounts$Genome
# Sequence counts per genome relative to total sequences in genome
MAGcounts_relLength=MAGcounts[,-1]/genomelength[,-1]
dim(MAGcounts_relLength)
MAGcounts_relLength[1:6,1:6]
# Sequence counts per genome relative to total sequences in genome and in sample
MAGcounts_relL_rel=t(t(MAGcounts_relLength)/colSums(MAGcounts_relLength))
colnames(MAGcounts_relL_rel)=gsub(".Read.Count","",colnames(MAGcounts_relL_rel))
colnames(MAGcounts_relL_rel)=gsub("_",".",colnames(MAGcounts_relL_rel))
rownames(MAGcounts_relL_rel)=Genome_ID
# Transpose the MAG table to have MAGs as columns and samples as rows
MAGcounts_relL_rel_t=data.frame(t(MAGcounts_relL_rel))
# Import phylo tree
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
phylo.tree=drop.tip(phylo_tree,phylo_tree$tip.label[-match(colnames(MAGcounts_relL_hel), phylo_tree$tip.label)])
MAGcounts <- read.delim("data/MAG_counts.txt", sep = '\t')
MAGcounts <- read.delim("data/MAG_counts.csv")
head(MAGcounts)
MAGcounts <- read.delim("data/MAG_counts.csv", sep = ',')
head(MAGcounts)
phylo_tree
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
library(vegan)
library(ggplot2)
library(RColorBrewer)
library(ape)
library(phytools)
library(UpSetR)
library(edgeR)
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
phylo_tree$tip.label
phylo_tree$tip.label[grepl("bin",phylo_tree$tip.label)]
MAGcounts <- read.delim("data/MAG_counts.csv", sep = ',')
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
phylo.tree=drop.tip(phylo_tree,phylo_tree$tip.label[-match(rownames(MAGcounts), phylo_tree$tip.label)])
phylo.tree
phylo_tree$tip.label[-match(rownames(MAGcounts)
phylo_tree$tip.label[-match(rownames(MAGcounts), phylo_tree$tip.label)]
rownames(MAGcounts)
head(MAGcounts)
MAGcounts <- read.delim("data/MAG_counts.csv", sep = ',',row.names=1)
head(MAGcounts)
phylo.tree=drop.tip(phylo_tree,phylo_tree$tip.label[-match(rownames(MAGcounts), phylo_tree$tip.label)])
phylo.tree
plot(phylo.tree)
is.ultrametric(phylo.tree)
phylo.tree=force.ultrametric(phylo.tree,method = "nnls")
is.ultrametric(phylo.tree)
plot(phylo.tree)
write.tree(phylo.tree,"/Users/anttonalberdi/Downloads/MAG.tre")
write.tree(phylo.tree,"/Users/anttonalberdi/Downloads/MAG.tre",tree.names == TRUE)
write.nexus(phylo.tree,"/Users/anttonalberdi/Downloads/MAG.tre")
class(phylo.tree)
phylo.tree
library(phytools)
writeNexus(phylo.tree, "/Users/anttonalberdi/Downloads/MAG.tre")
writeNexus(phylo.tree, "/Users/anttonalberdi/Downloads/MAG.tre")
writeNexus(phylo.tree, "/Users/anttonalberdi/Downloads/MAG2.tre")
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
phylo.tree=drop.tip(phylo_tree,phylo_tree$tip.label[-match(rownames(MAGcounts), phylo_tree$tip.label)])
write.nexus(phylo.tree,"/Users/anttonalberdi/Downloads/MAG3.tre")
write.tree(phylo.tree,"/Users/anttonalberdi/Downloads/MAG3.tre")
writeNexus(phylo.tree, "/Users/anttonalberdi/Downloads/MAG.tre")
writeNexus(phylo.tree, "/Users/anttonalberdi/Downloads/MAG4.tre")
expression <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts.txt")
library(tidyverse)
expression <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts.txt")
colnames(expression) <- gsub(" Read Count","",colnames(expression))
expression <- as.data.frame(expression)
rownames(expression) <- expression[,1]
expression <- expression[,-1]
expression <- round(tss(expression)*1000000,0)
library(hilldiv)
expression <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/gene_counts.txt")
colnames(expression) <- gsub(" Read Count","",colnames(expression))
expression <- as.data.frame(expression)
rownames(expression) <- expression[,1]
expression <- expression[,-1]
expression <- round(tss(expression)*1000000,0)
annotations <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2)
genecol=1
magcol=2
keggcol=9
eccol=c(10,19)
pepcol=12
annotations <- read_tsv("/Users/anttonalberdi/github/holofood_metatranscriptomics/data/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2)
genecol=1
magcol=2
keggcol=9
eccol=c(10,19)
pepcol=12
library(DAMMA)
setDT(annotations)
annotations2 <- annotations[,c(genecol,magcol,keggcol,eccol,pepcol), with=FALSE]
colnames(annotations2) <- c("Genes","MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
library(data.table)
setDT(annotations)
annotations2 <- annotations[,c(genecol,magcol,keggcol,eccol,pepcol), with=FALSE]
colnames(annotations2) <- c("Genes","MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
#Filter annotations table
annotations3 <- annotations2[Genes %in% sharedgenes,]
#List MAGs
MAGs <- unique(dplyr::pull(annotations3, MAGs))
MAG <- MAGs[1]
MAG
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
#Fetch MAG annotations
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- EC[!is.na(EC)]
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(rbind(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[pep != ""]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
expression_table <- c()
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- EC[!is.na(EC)]
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(rbind(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[pep != ""]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
genes1
genes2
genes
genes <- unique(rbind(genes1,genes2))
genes
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- EC[!is.na(EC)]
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(rbind(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
e
annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes1
genes2
genes <- unique(rbind(genes1,genes2))
genes1
genes <- unique(c(genes1,genes2))
genes
expression3 <- expression2[genes,]
expression3
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
head(expression_table)
definition="(K00815,K00838,K00832,K03334) K00457 K00451 K01800 (K01555,K16171)"
#If using EC codes
if (grepl(".", definition, fixed = TRUE)){
present <- gsub(".","_",present,fixed=TRUE)
definition <- gsub(".","_",definition,fixed=TRUE)
}
#List present annotations units
present <- nrow(expression_table)
#Decompose definition
def_decomp <- decompose_definition(definition)
#Set levels
def_level <- set_levels(def_decomp)
def_decomp
def_table <- create_step_matrix(def_decomp,def_level)
def_table
levels <- names(colSums(def_table[,c(3:8)],na.rm=TRUE)[colSums(def_table[,c(3:8)],na.rm=TRUE)>0])
levels
length(present)
present
rownames(expression_table)
def_decomp
def_units <- def_decomp[!def_decomp %in% c("(",")"," ",",","+"),]
c("(",")"," ",",","+")
def_units <- def_decomp[!def_decomp %in% c("(",")"," ",",","+")]
def_units
expression_table_sub <- expression_table[def_units,]
expression_table_sub
head(expression_table)
def_units
expression_table["K00815",]
expression_table["K07462",]
expression_table[def_units,]
def_units <- c("K07462",def_units)
def_table_sub <- def_table[,c("L0_group","L1_group","L2_group")][complete.cases(def_table[,c("L0_group","L1_group","L2_group")]),]
def_table_sub
def_table
def_table_sub <- def_table[,c("L0_group","L1_group")][complete.cases(def_table[,c("L0_group","L1_group")]),]
def_table_sub
L1_clusters <- unique(def_table_sub$L0_group)
L1_clusters
c=L1_clusters[1]
subdef <- def_table[(def_table$L0_group == c) & (!is.na(def_table$L1_group)),"def_decomp"]
subdef
subdef2 <- subdef[subdef != ","]
subdef2
rownames(expression_table)
expression_table[rownames(expression_table) %in% subdef2]
expression_table[rownames(expression_table) %in% subdef2,]
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2,]
class(subdef2_expression)
dim(subdef2_expression)
dim(subdef2_expression)[2]
rep(0,dim(subdef2_expression)[2])
sapply(subdef2_expression, max, na.rm = TRUE)
subdef
ncol(expression_vector)
rep(definition,ncol(expression_table))
as.matrix(rep(definition,ncol(expression_table)))
as.data.frame(rep(definition,ncol(expression_table)))
rownames(definition_table) <- colnames(expression_table)
definition_table <- as.data.frame(rep(definition,ncol(expression_table)))
rownames(definition_table) <- colnames(expression_table)
head(definition_table)
fullness_expression_table <- as.data.frame(rep(definition,ncol(expression_table)))
rownames(fullness_expression_table) <- colnames(fullness_expression_table)
fullness_expression_table <- as.data.frame(rep(definition,ncol(expression_table)))
rownames(fullness_expression_table) <- colnames(expression_table)
head(fullness_expression_table)
for(i in c(1:nrow(fullness_expression_table))){
fullness_expression_table[i,] <- gsub(paste(c("(",subdef,")"),collapse=""),values[i], fullness_expression_table[i,], fixed = TRUE)
}
values <- rep(0,dim(subdef2_expression)[2])
for(i in c(1:nrow(fullness_expression_table))){
fullness_expression_table[i,] <- gsub(paste(c("(",subdef,")"),collapse=""),values[i], fullness_expression_table[i,], fixed = TRUE)
}
fullness_expression_table
def_decomp
def_decomp
list(rep(definition,ncol(expression_table)))
as.list(rep(definition,ncol(expression_table)))
definition_expression_list <- as.list(rep(definition,ncol(expression_table)))
names(definition_expression_list) <- colnames(expression_table)
definition_expression_list
def_decomp_list <- lapply(definition_expression_list, function(x) decompose_definition(x))
def_decomp_list
def_level_list <- lapply(def_decomp, function(x) set_levels(x))
def_level_list
def_level_list <- lapply(def_decomp_list, function(x) set_levels(x))
def_level_list
def_table_list <- lapply(def_decomp_list,def_level_list, function(x,y) create_step_matrix(x,y)
)
def_table_fun <- function(x,y){create_step_matrix(x,y)}
def_table_list <- mapply(def_table_fun,def_decomp_list,def_level_list)
def_table_list
def_table_list <- mapply(def_table_fun,c(def_decomp_list),c(def_level_list))
def_table_list
def_table_list <- mapply(function(X,Y) {function(row) create_step_matrix(x,y)}, x=def_decomp_list, y=def_level_list)
def_table_list <- mapply(function(X,Y) create_step_matrix(x,y), x=def_decomp_list, y=def_level_list)
def_table_list <- mapply(function(x,y) create_step_matrix(x,y), x=def_decomp_list, y=def_level_list)
def_table_list
length(def_level_list)
def_level_list
names(def_level_list)
l=1
def_decomp_list[l]
def_decomp_list[[l]
]
def_table_list <- list()
for (l in names(def_level_list)){
def_table_list <- append(def_table_list,l=create_step_matrix(def_decomp_list[[l]],def_level_list[[l]]))
}
def_table_list <- list()
for (l in names(def_level_list)){
def_table_list <- append(def_table_list,create_step_matrix(def_decomp_list[[l]],def_level_list[[l]]))
}
def_table_list
create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list <- append(def_table_list,def_table)
}
def_table_list <- list()
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list <- append(def_table_list,def_table)
}
def_table_list
def_table_list <- list()
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list[l] <- def_table
}
def_table_list
def_table
class(def_table)
def_table_list <- list()
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list[[l]] <- def_table
}
def_table_list
levels_list <- lapply(def_table_list, function(x) names(colSums(x[,c(3:8)],na.rm=TRUE)[colSums(x[,c(3:8)],na.rm=TRUE)>0]))
levels_list
rev(levels_list[[1]])
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2,]
subdef2_expression
expression_table[rownames(expression_table) %in% subdef2,]
head(expression_table)
sample="CC08.13F1a"
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2,sample]
subdef2_expression
dim(subdef2_expression)
is.null(subdef2_expression)
is.empty(subdef2_expression)
length(subdef2_expression)
#Iterate calculation across levels and samples
for(level in rev(levels_list[[1]])){
for(s in names(definition_expression_list)){
definition_expression_list[[s]] <- distillate_definition_expression(sample=s,definition_expression_list[[s]], def_table_list[[s]], level, expression_table)
if(level != "L0_group"){
def_decomp_list[[s]] <- decompose_definition(definition_expression_list[[s]])
def_level_list[[s]] <- set_levels(def_decomp_list[[s]])
def_table_list[[s]] <- create_step_matrix(def_decomp_list[[s]],def_level_list[[s]])
}
}
}
s
def_table
if (level == "L1_group"){
#L1
def_table_sub <- def_table[,c("L0_group","L1_group")][complete.cases(def_table[,c("L0_group","L1_group")]),]
L1_clusters <- unique(def_table_sub$L0_group)
for (c in L1_clusters){
subdef <- def_table[(def_table$L0_group == c) & (!is.na(def_table$L1_group)),"def_decomp"]
if(" " %in% subdef | "+" %in% subdef){
subdef2 <- subdef[subdef != ","]
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2,sample]
if(length(subdef2_expression) > 0){
value <- mean(subdef2_expression)
}else{
value <- 0
}
} else if("," %in% subdef){
subdef2 <- subdef[subdef != ","]
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2,sample]
if(length(subdef2_expression) > 0){
value <- max(subdef2_expression)
}else{
value <- 0
}
} else {
value <- 0
}
#Replace definition by value
definition <- gsub(paste(c("(",subdef,")"),collapse=""),value,definition, fixed = TRUE)
}
}
definition
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(roxygen2)
roxygenize()
roxygenize()
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
