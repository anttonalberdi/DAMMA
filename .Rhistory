abundance_table <- t(t(abundance_table))
colnames(abundance_table) <- "Community"
#Declare single community
communities <- "Community"
}else{
#Declare communities from abundance table
communities <- colnames(abundance_table)
}
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
head(annotation_abundance_table)
id_relabun_table <- c()
identifier_vector <- c()
col=10
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
head(annotation_abundance_table_sub)
head(EC_detect)
length(EC_detect)
head(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)))
head(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)),100)
head(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)),500)
head(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)),1000)
head(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)),10000)
tail(sapply(gregexpr("[[:alpha:]]+", EC_detect), function(x) sum(x > 0)),10000)
nwords(EC_detect)
nwords <- function(string, pseudo=F){
ifelse( pseudo,
pattern <- "\\S+",
pattern <- "[[:alpha:]]+"
)
str_count(string, pattern)
}
nwords(EC_detect)
library(stringr)
nwords(EC_detect)
table(nwords(EC_detect))
table(nwords(EC_detect, pseudo=T))
EC_detect
table(nwords(EC_codes))
table(nwords(EC_codes, pseudo=T))
table(sapply(gregexpr("[[:alpha:]]+", EC_codes), function(x) sum(x > 0)))
table(str_count(string, "\\S+"))
table(str_count(EC_codes, "\\S+"))
head(str_count(EC_codes, "\\S+"))
head(annotation_abundance_table)
head(annotation_abundance_table_sub)
table(str_count(annotation_abundance_table_sub[,1], "\\S+"))
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
head(annotation_abundance_table_sub)
max(annotation_abundance_table_sub$ambiguity)
a=2
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
origin[rep(1:nrow(origin),2),]
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
origin
nrow(origin)
nrow(origin[rep(1:nrow(origin),2),])
nrow(origin[rep(1:nrow(origin),1),])
origin[rep(1:nrow(origin),a-1),]
nrow(origin[rep(1:nrow(origin),a-1),])
head(origin)
identifiers <- unlist(strsplit(origin[,1], " "))
length(identifiers)
head(identifiers)
head(strsplit(origin[,1], " "))
library(reshape2)
colsplit(string=names.reads, pattern=" ", names=c("Part1", "Part2"))
head(colsplit(string=origin[,1], pattern=" ", names=c("Part1", "Part2"))
)
head(colsplit(string=origin[,1], pattern=" "))
colsplit(string=origin[,1], pattern=" ",names=c(2:max(annotation_abundance_table_sub$ambiguity)))
head(colsplit(string=origin[,1], pattern=" ",names=c(2:a)))
head(colsplit(string=origin[,1], pattern=" ",names=c(1:a)))
head(origin)
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
nrow(identifiers)
origin <- identifiers[,1]
head(origin)
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
origin[,1] <- identifiers[,1]
head(origin)
unlist(identifiers)
length(unlist(identifiers[,c(2:a)]))
head(unlist(identifiers[,c(2:a)]))
head(identifiers)
head(annotation_abundance_table_sub)
head(disambiguation)
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
head(disambiguation)
table(str_count(annotation_abundance_table_sub[,1], "\\S+"))
for(a in c(2:max(annotation_abundance_table_sub$ambiguity))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
table(str_count(annotation_abundance_table_sub[,1], "\\S+"))
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
for(a in c(2:max(annotation_abundance_table_sub$ambiguity))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
table(str_count(annotation_abundance_table_sub[,1], "\\S+"))
head(annotation_abundance_table_sub)
nrow(annotation_abundance_table_sub)
annotation_abundance_table_sub <- annotation_abundance_table_sub[!grepl("-", annotation_abundance_table_sub$ID),]
nrow(annotation_abundance_table_sub)
id_relabun_table <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
for(a in c(2:max(annotation_abundance_table_sub$ambiguity))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
for(a in c(2:max(annotation_abundance_table_sub$ambiguity))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
#Remove low-resolution annotations
annotation_abundance_table_sub <- annotation_abundance_table_sub[!grepl("-", annotation_abundance_table_sub$ID),]
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
for(a in c(2:max(annotation_abundance_table_sub$ambiguity))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
head(annotation_abundance_table_sub)
a
max(annotation_abundance_table_sub$ambiguity)
annotation_abundance_table_sub$ambiguity
max(annotation_abundance_table_sub$ambiguity)
max(annotation_abundance_table_sub$ambiguity,na.rm=T)
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
id_relabun_table <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
#Remove low-resolution annotations
annotation_abundance_table_sub <- annotation_abundance_table_sub[!grepl("-", annotation_abundance_table_sub$ID),]
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
setwd("/Users/anttonalberdi/github/holofood_damma_metagenomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
######
annotations_file="annotations_ileum.tsv"
annotations_ileum <- fread(annotations_file)
relabun_ileum <- read.table("relabun_AB_ileum.tsv",row.names=1,header=T)
community_MCI_AB_ileum <- damma_community(annotations_ileum,pathway_table,abundance_table=relabun_ileum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
head(id_relabun_table)
id_relabun_table <- id_relabun_table[,-ncol(id_relabun_table)]
head(id_relabun_table)
load_all('/Users/anttonalberdi/github/DAMMA')
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
load_all('/Users/anttonalberdi/github/DAMMA')
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
head(Adam L Koziol)
head(community_MCI_AB_caecum)
save(community_MCI_AB_caecum,file="community_AB_caecum.RData")
community_MCI_caecum_compounds <- damma_compounds(community_MCI_AB_caecum,pathway_table)
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(community_MCI_caecum_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
write.table(community_MCI_caecum_compounds,"MCI_community_caecum.tsv",row.names=T,col.names=T,sep="\t")
annotations_file="annotations_ileum.tsv"
annotations_ileum <- fread(annotations_file)
relabun_ileum <- read.table("relabun_AB_ileum.tsv",row.names=1,header=T)
community_MCI_AB_ileum <- damma_community(annotations_ileum,pathway_table,abundance_table=relabun_ileum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_ileum,file="community_AB_ileum.RData")
community_MCI_AB_ileum_compounds <- damma_compounds(community_MCI_AB_ileum,pathway_table)
write.table(community_MCI_AB_ileum_compounds,"MCI_community_AB_ileum.tsv",row.names=T,col.names=T,sep="\t")
compounds_table_df <- melt(community_MCI_AB_ileum_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
#Trials A, B and C Caecum
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_AB_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
relabun_C_caecum <- read.table("relabun_C_caecum.tsv",row.names=1,header=T)
relabun_caecum <- cbind(relabun_AB_caecum,relabun_C_caecum)
community_MCI_ABC_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_ABC_caecum,file="community_ABC_caecum.RData")
community_MCI_ABC_caecum_compounds <- damma_compounds(community_MCI_ABC_caecum,pathway_table)
write.table(community_MCI_ABC_caecum_compounds,"MCI_community_ABC_caecum.tsv",row.names=T,col.names=T,sep="\t")
library(roxygen2)
roxygenize()
library(roxygen2)
roxygenize()
