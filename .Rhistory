colnames(abundance_table) <- "Community"
#Declare single community
communities <- "Community"
}else{
#Declare communities from abundance table
communities <- colnames(abundance_table)
}
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
if(length(communities) == 1){
annotation_abundance_table <- annotation_abundance_table[annotation_abundance_table[,relabun_index] != 0,]
}else{
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
}
####
# Prepare relative abundance table
####
id_relabun_table <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove low-resolution annotations
annotation_abundance_table_sub <- annotation_abundance_table_sub[!grepl("-", annotation_abundance_table_sub$ID),]
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Remove ambiguity column
id_relabun_table <- id_relabun_table[,-ncol(id_relabun_table)]
####
# Resolve ambiguities and duplications
####
cat("\tCalculating community-weighed gene representation values...\n")
#Remove redundancy
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
####
# Generate community-specific MCIs
####
cat("\tCalculating community-level MCIs for community:\n")
communities
head(id_relabun_table_agg)
length(id_relabun_table_agg)
MCI_table <- c()
m=0
for(community in communities){
m=m+1
cat("\t\t",community," (",m,"/",length(communities),")\n", sep = "")
if(length(communities) == 1){
comm_abun <- id_relabun_table_agg
}else{
comm_abun <- id_relabun_table_agg[,community]
}
names(comm_abun) <- rownames(id_relabun_table_agg)
MCI_vector <- c()
suppressWarnings(
for(f in c(1:nrow(pathway_table))){
definition=pathway_table[f,"Definition"]
MCI <- compute_MCI_community(definition,comm_abun)
MCI_vector <- c(MCI_vector,MCI)
}
)
#Append MCI vector of the Genome to the MCI table containing MCI values of all Genomes
MCI_table <- rbind(MCI_table,MCI_vector)
}
head(MCI_table)
cat("Starting DAMMA commmunity analysis\n(Note this may take a while)...\n")
#Declare TSS function
tss <- function(abund){sweep(abund, 2, colSums(abund), FUN="/")}
#Convert tables into data frames
annotation_table <- as.data.frame(annotation_table)
pathway_table <- as.data.frame(pathway_table)
if(!missing(abundance_table)){abundance_table <- as.data.frame(abundance_table)}
if(!missing(completeness_table)){completeness_table <- as.data.frame(completeness_table)}
if(missing(abundance_table)){
#If abundance table does not exist, create a mock abundance table of a single even community
cat("\tAs no relative abundance information was provided DAMMA will weigh genomes evenly\n")
abundance_table <- rep(1/length(unique(annotation_table[,genomecol])),length(unique(annotation_table[,genomecol])))
names(abundance_table) <- unique(annotation_table[,genomecol])
abundance_table <- t(t(abundance_table))
colnames(abundance_table) <- "Community"
#Declare single community
communities <- "Community"
}else{
#Declare communities from abundance table
communities <- colnames(abundance_table)
}
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
if(length(communities) == 1){
annotation_abundance_table <- annotation_abundance_table[annotation_abundance_table[,relabun_index] != 0,]
}else{
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
}
####
# Prepare relative abundance table
####
id_relabun_table <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove low-resolution annotations
annotation_abundance_table_sub <- annotation_abundance_table_sub[!grepl("-", annotation_abundance_table_sub$ID),]
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
#Disambiguation
annotation_abundance_table_sub$ambiguity <- str_count(annotation_abundance_table_sub[,1], "\\S+")
if(max(annotation_abundance_table_sub$ambiguity,na.rm=T) > 1){
for(a in c(2:max(annotation_abundance_table_sub$ambiguity,na.rm=T))){
origin <- annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,]
if(nrow(origin)>0){
disambiguation <- origin[rep(1:nrow(origin),a-1),]
identifiers <- colsplit(string=origin[,1], pattern=" ",names=c(1:a))
origin[,1] <- identifiers[,1]
disambiguation[,1] <- unlist(identifiers[,c(2:a)])
#Modify origin rows
annotation_abundance_table_sub[annotation_abundance_table_sub$ambiguity == a,] <- origin
#Append extra rows
annotation_abundance_table_sub <- rbind(annotation_abundance_table_sub,disambiguation)
}
}
}
#Remove duplicates
annotation_abundance_table_sub <- unique(annotation_abundance_table_sub)
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Remove ambiguity column
id_relabun_table <- id_relabun_table[,-ncol(id_relabun_table)]
####
# Resolve ambiguities and duplications
####
cat("\tCalculating community-weighed gene representation values...\n")
#Remove redundancy
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
head(id_relabun_table_agg)
head(annotation_abundance_table)
head(id_relabun_table)
head(comm_abun)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
head(id_relabun_table_agg)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
head(id_relabun_table_agg)
#Remove redundancy
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
if(ncol(id_relabun_table_agg) == 2){
id_relabun_table_agg <- id_relabun_table_agg[,-1]
names(id_relabun_table_agg) <- rownames(id_relabun_table_agg)
}else{
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
}
head(id_relabun_table_agg)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
if(ncol(id_relabun_table_agg) == 2){
idnames <- rownames(id_relabun_table_agg)
id_relabun_table_agg <- id_relabun_table_agg[,-1]
names(id_relabun_table_agg) <- idnames
}else{
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
}
head(id_relabun_table_agg)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
if(ncol(id_relabun_table_agg) == 2){
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
idnames <- rownames(id_relabun_table_agg)
id_relabun_table_agg <- id_relabun_table_agg[,-1]
names(id_relabun_table_agg) <- idnames
}else{
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
}
head(id_relabun_table_agg)
####
# Generate community-specific MCIs
####
cat("\tCalculating community-level MCIs for community:\n")
MCI_table <- c()
m=0
for(community in communities){
m=m+1
cat("\t\t",community," (",m,"/",length(communities),")\n", sep = "")
if(length(communities) == 1){
comm_abun <- id_relabun_table_agg
names(comm_abun) <- names(id_relabun_table_agg)
}else{
comm_abun <- id_relabun_table_agg[,community]
names(comm_abun) <- rownames(id_relabun_table_agg)
}
MCI_vector <- c()
suppressWarnings(
for(f in c(1:nrow(pathway_table))){
definition=pathway_table[f,"Definition"]
MCI <- compute_MCI_community(definition,comm_abun)
MCI_vector <- c(MCI_vector,MCI)
}
)
#Append MCI vector of the Genome to the MCI table containing MCI values of all Genomes
MCI_table <- rbind(MCI_table,MCI_vector)
}
head(MCI_table)
load_all('/Users/anttonalberdi/github/DAMMA')
community_MCI <- damma_community(gene_annotations,pathway_table,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
∑head(community_MCI <- damma_community(gene_annotations,pathway_table,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
)
head(community_MCI)
abundance_table <- genome_counts[,-1]
rownames(abundance_table) <- genome_counts[,1]
community_MCI <- damma_community(gene_annotations,pathway_table,abundance_table=abundance_table,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
HEAD(abundance_table <- genome_counts[,-1]
rownames(abundance_table) <- genome_counts[,1]
community_MCI <- damma_community(gene_annotations,pathway_table,abundance_table=abundance_table,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12))
head(abundance_table <- genome_counts[,-1]
rownames(abundance_table) <- genome_counts[,1]
community_MCI <- damma_community(gene_annotations,pathway_table,abundance_table=abundance_table,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12))
head(community_MCI)
rownames(gene_expression) <- gene_expression[,1]
gene_expression <- gene_expression[,-1]
distilled_expression_table <- damma_expression(gene_expression,gene_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
head(distilled_expression_table)
load_all('/Users/anttonalberdi/github/DAMMA')
rownames(gene_expression) <- gene_expression[,1]
gene_expression <- gene_expression[,-1]
distilled_expression_table <- damma_expression(gene_expression,gene_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
library(roxygen2)
roxygenize()
roxygenize()
roxygenize()
load_all('/Users/anttonalberdi/github/DAMMA')
roxygenize()
roxygenize()
distilled_expression_table <- damma_expression(gene_expression,gene_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
setwd("/Users/anttonalberdi/github/holofood_damma_metatranscriptomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression <- gene_expression[,c(1:128)]
genome_annotations <- fread("genome_annotations_caecum.tsv")
genome_annotations$gene_length <- genome_annotations$end_position - genome_annotations$start_position
genome_annotations$correction_factor <- median(genome_annotations$gene_length)/genome_annotations$gene_length
######
# GeTMM normalisation
######
# https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2246-7#Sec17
library(edgeR)
gene_expression_cor <- merge(gene_expression,genome_annotations[,c("V1","gene_length")],by.x="Contig",by.y="V1")
gene_expression_cor[,c(2:128)] <- gene_expression_cor[,c(2:128)]/(gene_expression_cor$gene_length/1000)
gene_expression_cor <- as.data.frame(gene_expression_cor)
rownames(gene_expression_cor) <- gene_expression_cor[,1]
gene_expression_cor <- gene_expression_cor[,c(2:128)]
y <- DGEList(counts=gene_expression_cor)
y <- calcNormFactors(y)
norm_counts <- cpm(y)
norm_counts_MAG <- merge(norm_counts,genome_annotations[,c("V1","fasta")],by.x="row.names",by.y="V1")
rownames(norm_counts_MAG) <- norm_counts_MAG[,1]
norm_counts_MAG <- norm_counts_MAG[,-1]
######
# Generate pathway-level expression MCIs
######
#Chunk analysis to sets of 100 MAGs
MAGs <- sort(unique(gene_expression$MAG))
gene_expression_1 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(1:100)],c(1:127)]
gene_expression_2 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(101:200)],c(1:127)]
gene_expression_3 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(201:300)],c(1:127)]
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:127)]
gene_expression_5 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(401:500)],c(1:127)]
gene_expression_6 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(501:600)],c(1:127)]
gene_expression_7 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(601:700)],c(1:127)]
gene_expression_8 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(701:825)],c(1:127)]
save(norm_counts_MAG,file="norm_counts_MAG.RData")
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:127)]
distilled_expression_caecum_4 <- damma_expression(gene_expression_4,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_4,file="distilled_caecum_4.RData")
head(gene_expression_4)
head(norm_counts_MAG)
MAGs <- sort(unique(gene_expression$MAG))
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:127)]
gene_expression_5 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(401:500)],c(1:127)]
gene_expression_6 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(501:600)],c(1:127)]
gene_expression_7 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(601:700)],c(1:127)]
gene_expression_8 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(701:825)],c(1:127)]
head(gene_expression_4)
head(gene_expression_3)
MAGs
head(gene_expression)
gene_expression <- fread("gene_expression_caecum.tsv")
gene_expression
MAGs <- sort(unique(gene_expression$MAG))
gene_expression <- gene_expression[,c(1:128)]
gene_expression_1 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(1:100)],c(1:127)]
gene_expression_2 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(101:200)],c(1:127)]
gene_expression_3 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(201:300)],c(1:127)]
gene_expression_4 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(301:400)],c(1:127)]
gene_expression_5 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(401:500)],c(1:127)]
gene_expression_6 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(501:600)],c(1:127)]
gene_expression_7 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(601:700)],c(1:127)]
gene_expression_8 <- norm_counts_MAG[norm_counts_MAG$fasta %in% MAGs[c(701:825)],c(1:127)]
head(gene_expression_4)
distilled_expression_caecum_4 <- damma_expression(gene_expression_4,genome_annotations,pathway_table,genecol=1,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(distilled_expression_caecum_4,file="distilled_caecum_4.RData")
decompose_definition
definition="K01580 (K13524,K07250,K00823,K16871) (K00135,K00139,K17761)"
decompose_definition(definition)
unlist(strsplit(definition, "() ,", perl=TRUE))
unlist(strsplit(definition, "(?<=() ,)", perl=TRUE))
unlist(strsplit(definition, "(?<=[() ,])", perl=TRUE))
unlist(strsplit(definition, "(?<=[( ) ,])", perl=TRUE))
unlist(strsplit(definition, "(?<=[ ( ),])", perl=TRUE))
unlist(strsplit(definition, "[ ( ),]+", perl=TRUE))
unlist(strsplit(definition, "(?=[ ( ),]+)", perl=TRUE))
decompose_definition(definition)
definition="1.2.7.1 (2.3.1.9,2.3.1.16) 1.1.1.35 4.2.1.150 1.3.1.109 2.3.1.19 (2.7.2.7,2.7.2.14)"
decompose_definition(definition)
unlist(strsplit(definition, "(?=[ ( ),]+)", perl=TRUE))
