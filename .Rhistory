kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
id_relabun_table <- unique(id_relabun_table)
head(id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"])
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
a=ambiguities[1]
a
row <- id_relabun_table[id_relabun_table$ID == a,]
row
elements <- strsplit(a, " ")
elements
elements <- unlist(strsplit(a, " "))
elements
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows1 <- rows
rows1$ID <- elements[1]
rows1
e=2
rows2 <- rows
rows2$ID <- elements[e]
rows2
#Remove redundancy
id_relabun_table <- unique(id_relabun_table)
#Split ambiguous rows
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
for(a in ambiguities){
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows1 <- rows
rows1$ID <- elements[1]
#Rename original rows
id_relabun_table[id_relabun_table$ID == a,] <- rows1
#Create new rows
for(e in c(2:length(elements)){
rows2 <- rows
rows2$ID <- elements[e]
id_relabun_table <- rbind(id_relabun_table,rows2)
}
}
#Remove ambiguous ECs
id_relabun_table <- id_relabun_table[!grepl("-", id_relabun_table$ID),]
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
for(a in ambiguities){
cat("\t\t",a,"\n")
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows1 <- rows
rows1$ID <- elements[1]
#Rename original rows
id_relabun_table[id_relabun_table$ID == a,] <- rows1
#Create new rows
for(e in c(2:length(elements))){
rows2 <- rows
rows2$ID <- elements[e]
id_relabun_table <- rbind(id_relabun_table,rows2)
}
}
tail(id_relabun_table)
tail(id_relabun_table,100)
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
length(ambiguities)
id_relabun_table <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,c(1:2)],FUN=sum)
id_relabun_table <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,c(1:2)]),FUN=sum)
head(id_relabun_table[,c(3:ncol(id_relabun_table))])
id_relabun_table[,c(1:2)]
id_relabun_table <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
head(id_relabun_table)
max(id_relabun_table[,-1])
id_relabun_table[id_relabun_table[,1] == "1.1.1.1",]
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
####
# Prepare relative abundance table
####
id_relabun_table <- c()
identifier_vector <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
id_relabun_table[id_relabun_table[,1] == "1.1.1.1",]
id_relabun_table <- unique(id_relabun_table)
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
max(id_relabun_table_agg[,-1])
head(id_relabun_table_agg)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
class(id_relabun_table_agg)
head(id_relabun_table_agg)
#Convert tables into data frames
annotation_table <- as.data.frame(annotation_table)
pathway_table <- as.data.frame(pathway_table)
if(!missing(abundance_table)){abundance_table <- as.data.frame(abundance_table)}
if(!missing(completeness_table)){completeness_table <- as.data.frame(completeness_table)}
if(missing(abundance_table)){
#If abundance table does not exist, create a mock abundance table of a single even community
abundance_table <- rep(1/length(unique(annotation_table[,genomecol])),length(unique(annotation_table[,genomecol])))
names(abundance_table) <- unique(annotation_table[,genomecol])
abundance_table <- t(t(abundance_table))
colnames(abundance_table) <- "Community"
#Declare single community
communities <- "Community"
}else{
#Declare communities from abundance table
communities <- colnames(abundance_table)
}
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
####
# Prepare relative abundance table
####
id_relabun_table <- c()
identifier_vector <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
####
# Resolve ambiguities and duplications
####
cat("\tResolving ambiguities and redundancy...\n")
#Remove redundancy
id_relabun_table <- unique(id_relabun_table)
#Split ambiguous rows
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
for(a in ambiguities){
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows1 <- rows
rows1$ID <- elements[1]
#Rename original rows
id_relabun_table[id_relabun_table$ID == a,] <- rows1
#Create new rows
for(e in c(2:length(elements))){
rows2 <- rows
rows2$ID <- elements[e]
id_relabun_table <- rbind(id_relabun_table,rows2)
}
}
#Remove redundancy (again)
id_relabun_table <- unique(id_relabun_table)
#Remove ambiguous ECs
id_relabun_table <- id_relabun_table[!grepl("-", id_relabun_table$ID),]
cat("\tCalculating community-weighed gene representation values...\n")
#Remove redundancy
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
head(id_relabun_table)
tail(id_relabun_table)
ambiguities
a="2.7.1.26 2.7.7.2"
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows1 <- rows
rows1$ID <- elements[1]
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
rows
#Split ambiguous rows
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
for(a in ambiguities){
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
if(nrow(rows)>0){
rows1 <- rows
rows1$ID <- elements[1]
#Rename original rows
id_relabun_table[id_relabun_table$ID == a,] <- rows1
#Create new rows
for(e in c(2:length(elements))){
rows2 <- rows
rows2$ID <- elements[e]
id_relabun_table <- rbind(id_relabun_table,rows2)
}
}
}
#Convert tables into data frames
annotation_table <- as.data.frame(annotation_table)
pathway_table <- as.data.frame(pathway_table)
if(!missing(abundance_table)){abundance_table <- as.data.frame(abundance_table)}
if(!missing(completeness_table)){completeness_table <- as.data.frame(completeness_table)}
if(missing(abundance_table)){
#If abundance table does not exist, create a mock abundance table of a single even community
abundance_table <- rep(1/length(unique(annotation_table[,genomecol])),length(unique(annotation_table[,genomecol])))
names(abundance_table) <- unique(annotation_table[,genomecol])
abundance_table <- t(t(abundance_table))
colnames(abundance_table) <- "Community"
#Declare single community
communities <- "Community"
}else{
#Declare communities from abundance table
communities <- colnames(abundance_table)
}
#Merge annotations and relative abundance information
cat("\tMerging annotations and relative abundance data...\n")
annotation_abundance_table <- merge(annotation_table,tss(abundance_table),by.x=genomecol,by.y="row.names")
#Declare index (column numbers) of the relative abundance data
relabun_index <- grep(paste(communities,collapse="|"), colnames(annotation_abundance_table))
#Filter annotations of 0 abundance genomes
annotation_abundance_table <- annotation_abundance_table[rowSums(annotation_abundance_table[,relabun_index]) != 0,]
####
# Prepare relative abundance table
####
id_relabun_table <- c()
identifier_vector <- c()
#KEGG identifiers
#K00000
if(!missing(keggcol)){
cat("\t\tExtracting relative abundance data for KEGG identifiers...\n")
for(col in keggcol){
column <- annotation_abundance_table[,col]
kegg_detect <- str_detect(column, "K[0-9]+")
kegg_detect[is.na(kegg_detect)] <- FALSE
column_sub <- column[kegg_detect]
kegg_codes <- unlist(str_match_all(column_sub, "K[0-9]+"))
annotation_abundance_table_sub <- annotation_abundance_table[kegg_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- kegg_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Enzyme Commission codes
#[EC:0.0.0.0]
if(!missing(eccol)){
cat("\t\tExtracting relative abundance data for EC identifiers...\n")
for(col in eccol){
column <- annotation_abundance_table[,col]
EC_detect <- str_detect(column, "(?<=\\[EC:).+?(?=\\])")
EC_detect[is.na(EC_detect)] <- FALSE
column_sub <- column[EC_detect]
EC_codes <- unlist(str_match_all(column_sub, "(?<=\\[EC:).+?(?=\\])"))
annotation_abundance_table_sub <- annotation_abundance_table[EC_detect,c(col,1,relabun_index)]
annotation_abundance_table_sub[,1] <- EC_codes
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
#Peptidases
#[EC:0.0.0.0]
if(!missing(pepcol)){
cat("\t\tExtracting relative abundance data for peptidase family identifiers...\n")
for(col in pepcol){
column <- annotation_abundance_table[,col]
pep_codes <- unique(c(unlist(c(annotation_abundance_table[,col]))))
pep_codes <- pep_codes[!is.na(pep_codes)]
pep_codes <- pep_codes[pep_codes != ""]
annotation_abundance_table_sub <- annotation_abundance_table[annotation_abundance_table[,col] %in% pep_codes, c(col,1,relabun_index)]
colnames(annotation_abundance_table_sub)[1] <- "ID"
if(nrow(annotation_abundance_table_sub)>0){
id_relabun_table <- rbind(id_relabun_table,annotation_abundance_table_sub)
}
}
}
####
# Resolve ambiguities and duplications
####
cat("\tResolving ambiguities and redundancy...\n")
#Remove redundancy
id_relabun_table <- unique(id_relabun_table)
#Split ambiguous rows
ambiguities <- id_relabun_table[grepl(" ", id_relabun_table$ID),"ID"]
for(a in ambiguities){
elements <- unlist(strsplit(a, " "))
rows <- id_relabun_table[id_relabun_table$ID == a,]
if(nrow(rows)>0){
rows1 <- rows
rows1$ID <- elements[1]
#Rename original rows
id_relabun_table[id_relabun_table$ID == a,] <- rows1
#Create new rows
for(e in c(2:length(elements))){
rows2 <- rows
rows2$ID <- elements[e]
id_relabun_table <- rbind(id_relabun_table,rows2)
}
}
}
#Remove redundancy (again)
id_relabun_table <- unique(id_relabun_table)
#Remove ambiguous ECs
id_relabun_table <- id_relabun_table[!grepl("-", id_relabun_table$ID),]
cat("\tCalculating community-weighed gene representation values...\n")
#Remove redundancy
id_relabun_table_agg <- aggregate(id_relabun_table[,c(3:ncol(id_relabun_table))],by=list(id_relabun_table[,"ID"]),FUN=sum)
rownames(id_relabun_table_agg) <- id_relabun_table_agg[,1]
id_relabun_table_agg <- id_relabun_table_agg[,-1]
head(id_relabun_table_agg)
max(id_relabun_table_agg)
load_all('/Users/anttonalberdi/github/DAMMA')
load("distilled_ileum.RData")
annotations_file="annotations_ileum.tsv"
annotations_ileum <- fread(annotations_file)
relabun_ileum <- read.table("relabun_AB_ileum.tsv",row.names=1,header=T)
community_MCI_ileum <- damma_community(annotations_ileum,pathway_table,abundance_table=relabun_ileum,MCI_table=distilled_ileum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_ileum,file="community_AB_ileum.RData")
community_MCI_AB_ileum <- community_MCI_ileum
save(community_MCI_AB_ileum,file="community_AB_ileum.RData")
head(community_MCI_AB_ileum)
community_MCI_AB_ileum_compounds <- damma_compounds(community_MCI_AB_ileum,pathway_table)
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(community_MCI_AB_ileum_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,pathway_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
load("distilled_caecum.RData")
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,MCI_table=distilled_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_caecum,file="community_AB_caecum.RData")
setwd("/Users/anttonalberdi/github/holofood_damma_metagenomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_caecum,file="community_AB_caecum.RData")
community_MCI_caecum_compounds <- damma_compounds(community_MCI_AB_caecum,pathway_table)
load_all('/Users/anttonalberdi/github/DAMMA')
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
roxygenize()
library(roxygen2)
roxygenize()
setwd("/Users/anttonalberdi/github/holofood_damma_metagenomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_caecum,file="community_AB_caecum.RData")
setwd("/Users/anttonalberdi/github/holofood_damma_metagenomics/")
library(data.table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations_file="annotations_caecum.tsv"
annotations_caecum <- fread(annotations_file)
relabun_caecum <- read.table("relabun_AB_caecum.tsv",row.names=1,header=T)
community_MCI_AB_caecum <- damma_community(annotations_caecum,pathway_table,abundance_table=relabun_caecum,genomecol=2,keggcol=9,eccol=c(10,19),pepcol=12)
save(community_MCI_AB_caecum,file="community_AB_caecum.RData")
