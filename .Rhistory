distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations <- read.table("/Users/anttonalberdi/Downloads/gene_annotation_debugging.csv",sep=",",header=TRUE)
colnames(annotations)[1] <- "Gene"
colnames(annotations)[3] <- "Genome"
expression <- read.table("/Users/anttonalberdi/Downloads/gene_expression_debugging.csv",sep=",",header=TRUE,row.names=1)
functions <- functions_table[(functions_table$Compound == "Starch") | (functions_table$Compound == "Fatty acid" | (functions_table$Compound == "L-Rhamnose")),]
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
functions <- functions_table[functions_table$Compound == "Fatty acid",]
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_expression_table
functions <- functions_table[functions_table$Compound == "L-Rhamnose",]
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
subdef2_expressionsubdef2_expression
subdef2_expression
rm(subdef2_expression)
subdef2_expression
length(subdef2_expression) > 0
length(subdef2_expression) > 0 | is.na(subdef2_expression)
is.empty(subdef2_expression)
is_missing(ds)
length(xsdf) == 0
subdef2_expression <- c()
subdef2_expressionÃ§
subdef2_expression
genecol=1
genomecol=3
keggcol=9
eccol=c(10,19)
pepcol=12
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
Genome="AI_all"
expression_fullness_list
#Simplify annotations table
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
#Calculate expression values for each Genome
cat("Calculating function expression values for Genome:\n")
m=0
expression_fullness_table_list <- list()
for(Genome in Genomes){
m=m+1
cat("\t",Genome," (",m,"/",length(Genomes),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch Genome annotations
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
kegg <- str_extract(annotations_Genome$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_Genome[grep(k, annotations_Genome$K1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_Genome <- annotations_Genome[order(annotations_Genome$E1,annotations_Genome$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_Genome$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_Genome$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_Genome[(grep(e, annotations_Genome$E1)),"Genes"]
genes2 <- annotations_Genome[(grep(e, annotations_Genome$E2)),"Genes"]
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome <- annotations_Genome[order(annotations_Genome$P1),]
for(p in pep){
genes <- annotations_Genome[grep(k, annotations_Genome$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
#Compute expression scores
cat("\t\tCalculating expression metrics...\n")
suppressWarnings(
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
)
#Convert sample list to matrix
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions$Code
#Append to Genome list
expression_fullness_table_list[[Genome]] <- expression_fullness_table
}
#Simplify annotations table
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
Genome="AI_all"
expression_fullness_table_list <- list()
cat("\t",Genome," (",m,"/",length(Genomes),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch Genome annotations
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
kegg <- str_extract(annotations_Genome$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_Genome[grep(k, annotations_Genome$K1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_Genome <- annotations_Genome[order(annotations_Genome$E1,annotations_Genome$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_Genome$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_Genome$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_Genome[(grep(e, annotations_Genome$E1)),"Genes"]
genes2 <- annotations_Genome[(grep(e, annotations_Genome$E2)),"Genes"]
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome <- annotations_Genome[order(annotations_Genome$P1),]
for(p in pep){
genes <- annotations_Genome[grep(k, annotations_Genome$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
functions
f=1
definition=functions[f,"Definition"]
head(expression_table)
#If using EC codes
if (grepl(".", definition, fixed = TRUE)){
rownames(expression_table) <- gsub(".","_",rownames(expression_table),fixed=TRUE)
definition <- gsub(".","_",definition,fixed=TRUE)
}
#Declare definition table
definition_expression_list <- as.list(rep(definition,ncol(expression_table)))
names(definition_expression_list) <- colnames(expression_table)
#Decompose definition
def_decomp_list <- lapply(definition_expression_list, function(x) decompose_definition(x))
#Set levels
def_level_list <- lapply(def_decomp_list, function(x) set_levels(x))
#Definition-level table
def_table_list <- list()
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list[[l]] <- def_table
}
#Calculate number of levels
levels_list <- lapply(def_table_list, function(x) names(colSums(x[,c(3:8)],na.rm=TRUE)[colSums(x[,c(3:8)],na.rm=TRUE)>0]))
#Iterate calculation across levels and samples
for(level in rev(levels_list[[1]])){
for(s in names(definition_expression_list)){
definition_expression_list[[s]] <- distillate_definition_expression(sample=s,definition_expression_list[[s]], def_table_list[[s]], level, expression_table)
if(level != "L0_group"){
def_decomp_list[[s]] <- decompose_definition(definition_expression_list[[s]])
def_level_list[[s]] <- set_levels(def_decomp_list[[s]])
def_table_list[[s]] <- create_step_matrix(def_decomp_list[[s]],def_level_list[[s]])
}
}
}
#Declare definition table
definition_expression_list <- as.list(rep(definition,ncol(expression_table)))
names(definition_expression_list) <- colnames(expression_table)
#Decompose definition
def_decomp_list <- lapply(definition_expression_list, function(x) decompose_definition(x))
#Set levels
def_level_list <- lapply(def_decomp_list, function(x) set_levels(x))
#Definition-level table
def_table_list <- list()
for (l in names(def_level_list)){
def_table <- create_step_matrix(def_decomp_list[[l]],def_level_list[[l]])
def_table_list[[l]] <- def_table
}
#Calculate number of levels
levels_list <- lapply(def_table_list, function(x) names(colSums(x[,c(3:8)],na.rm=TRUE)[colSums(x[,c(3:8)],na.rm=TRUE)>0]))
def_table_list
levels_list
subdef <- def_table[!is.na(def_table$L0_group),"def_decomp"]
subdef
subdef2 <- subdef[(subdef != " ") & (subdef != "+")]
subdef2_code <- subdef2[grepl("_", subdef2, fixed = TRUE) | grepl("[A-Z]", subdef2, fixed = FALSE)]
subdef2_number <- as.numeric(subdef2[!subdef2 %in% subdef2_code])
subdef2_code
subdef2_number
length(subdef2_code) > 0
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2_code,sample]
rownames(expression_table) %in% subdef2_code
expression_table[,sample]
sample
sample="GH2_3"
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2_code,sample]
subdef2_expression
is.empty(subdef2_expression)
length(subdef2_expression)
if(length(subdef2_code) > 0){
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2_code,sample]
if(length(subdef2_code) == 0){
subdef2_expression <- 0
}
}else{
subdef2_expression <- NA
}
cat("subdef2_code: ",subdef2_code,"\n")
cat("subdef2_expression: ",subdef2_expression,"\n")
length(subdef2_code) == 0
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2_code,sample]
subdef2_expression
if(length(subdef2_code) > 0){
subdef2_expression <- expression_table[rownames(expression_table) %in% subdef2_code,sample]
if(length(subdef2_expression) == 0){
subdef2_expression <- 0
}
}else{
subdef2_expression <- NA
}
cat("subdef2_code: ",subdef2_code,"\n")
cat("subdef2_expression: ",subdef2_expression,"\n")
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations <- read.table("/Users/anttonalberdi/Downloads/gene_annotation_debugging.csv",sep=",",header=TRUE)
colnames(annotations)[1] <- "Gene"
colnames(annotations)[3] <- "Genome"
expression <- read.table("/Users/anttonalberdi/Downloads/gene_expression_debugging.csv",sep=",",header=TRUE,row.names=1)
functions <- functions_table[(functions_table$Compound == "Starch") | (functions_table$Compound == "Fatty acid" | (functions_table$Compound == "L-Rhamnose")),]
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_expression_table
load_all('/Users/anttonalberdi/github/DAMMA')
distilled_expression_table <- damma_expression(expression,annotations,functions,genecol=1,genomecol=3,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_expression_table
head(expression_table)
tail(expression_table)
head(annotations_Genome)
tail(annotations_Genome)
annotations_Genome[annotations_Genome$P1=="U69","Genes"]
head(expression)
expression[genes,]
genes <- annotations_Genome[annotations_Genome$P1=="U75","Genes"]
expression[genes,]
genes <- annotations_Genome[annotations_Genome$P1!="","Genes"]
expression[genes,]
head(expression_table)
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
head(expression2)
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome <- annotations_Genome[order(annotations_Genome$P1),]
pep
nrow(annotations_Genome)
head(annotations_Genome)
annotations_Genome <- annotations_Genome[annotations_Genome$P1 != "",]
head(annotations_Genome)
nrow(annotations_Genome)
Genome
expression_fullness_table_list <- list()
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$K1),]
nrow(annotations_Genome2)
annotations_Genome2 <- annotations_Genome[annotations_Genome$K1 != "",]
nrow(annotations_Genome2)
kegg <- str_extract(annotations_Genome2$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_Genome2[grep(k, annotations_Genome2$K1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$E1,annotations_Genome$E2),]
nrow(annotations_Genome2)
annotations_Genome2 <- annotations_Genome2[(annotations_Genome2$E1 != "") | annotations_Genome2$E2 != ""),]
annotations_Genome2 <- annotations_Genome2[(annotations_Genome2$E1 != "") | (annotations_Genome2$E2 != ""),]
nrow(annotations_Genome2)
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_Genome2$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_Genome2$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations_Genome2[(grep(e, annotations_Genome2$E1)),"Genes"]
genes2 <- annotations_Genome2[(grep(e, annotations_Genome2$E2)),"Genes"]
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
tail(expression_table)
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$P1),]
annotations_Genome2 <- annotations_Genome2[annotations_Genome2$P1 != "",]
for(p in pep){
genes <- annotations_Genome2[grep(k, annotations_Genome2$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
tail(expression_table)
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$P1),]
annotations_Genome2 <- annotations_Genome2[annotations_Genome2$P1 != "",]
nrow(annotations_Genome2)
tail(annotations_Genome2)
dim(expression3)[1]
p
pep
p="U75"
genes <- annotations_Genome2[grep(k, annotations_Genome2$P1),"Genes"]
genes
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$P1),]
annotations_Genome2 <- annotations_Genome2[annotations_Genome2$P1 != "",]
for(p in pep){
genes <- annotations_Genome2[grep(p, annotations_Genome2$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
tail(expression_table)
#Peptidases
pep <- unique(annotations_Genome$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations_Genome2 <- annotations_Genome[order(annotations_Genome$P1),]
annotations_Genome2 <- annotations_Genome2[annotations_Genome2$P1 != "",]
for(p in pep){
genes <- annotations_Genome2[grep(p, annotations_Genome2$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- p
expression_table <- rbind(expression_table,expression3)
}
}
tail(expression_table)
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
pathway_table <- functions_table
annotation_table <- annotations
annotation_table <- gene_annotations
annotation_table <- as.data.frame(annotation_table)
pathway_table <- as.data.frame(pathway_table)
Genomes <- unique(annotation_table[,genomecol])
head(annotation_table)
genomecol=2
Genomes <- unique(annotation_table[,genomecol])
Genomes
eccol=c(10,19)
annotations_Genome[,eccol]
Genome=Genomes[1]
annotations_Genome <- annotation_table[annotation_table[,genomecol] == Genome,]
head(annotations_Genome[,eccol])
head(annotations_Genome)
EC <- unlist(str_match_all(annotations_Genome[,eccol], "(?<=\\[EC:).+?(?=\\])"))
str_match_all(annotations_Genome[,eccol], "(?<=\\[EC:).+?(?=\\])")
str_match_all(annotations_Genome[,eccol][,1], "(?<=\\[EC:).+?(?=\\])")
str_match_all(annotations_Genome[,eccol][,2], "(?<=\\[EC:).+?(?=\\])")
head(annotations_Genome[,eccol][,1])
annotations_Genome[,eccol]
head(annotations_Genome[,eccol])
head(c(annotations_Genome[,eccol]))
X <- head(annotations_Genome[,eccol])
X
c(X)
unlist(c(X))
c(unlist(c(X)))
class(c(unlist(c(X))))
EC <- unlist(str_match_all(c(unlist(c(annotations_Genome[,eccol]))), "(?<=\\[EC:).+?(?=\\])"))
head(EC)
EC <- unique(unlist(strsplit(EC, " ")))
EC <- EC[!grepl("-", EC, fixed = TRUE)]
head(EC)
length(EC)
EC
EC <- unique(unlist(strsplit(EC, " ")),na.rm=TRUE)
EC
EC <- EC[grepl(".", EC, fixed = TRUE)]
EC
EC <- unlist(str_match_all(c(unlist(c(annotations_Genome[,eccol]))), "(?<=\\[EC:).+?(?=\\])"))
EC
