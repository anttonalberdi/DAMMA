library(ggplot2)
ggplot(data=depths) +
geom_bar(stat="identity")
depths <- cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts))
head(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")
depths <- depths[sort(depths$Depth),]
head(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
depths$Depth <- as.numeric(depths$Depth)
depths <- depths[order(depths$Depth),]
head(depths)
depths <- depths[rev(order(depths$Depth)),]
head(depths)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
hline(value=5000000)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000
)
ggplot(depths, aes(x=Samples,y=Depth)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
depths$Threshold <- depths$Depth
depths$Threshold[depths$Threshold > 5000000] <- 1
depths$Threshold[depths$Threshold < 5000000] <- 0
head(depths)
tail(depths)
depths <- as.data.frame(cbind(Samples=colnames(gene_counts),Depth=colSums(gene_counts)))
depths$Depth <- as.numeric(depths$Depth)
depths$Threshold <- depths$Depth
head(depths)
depths$Threshold[depths$Threshold > 5000000] <- 1
head(depths)
depths$Threshold[depths$Threshold < 5000000] <- 0
head(depths)
depths$Depth <- as.numeric(depths$Depth)
depths$Threshold <- depths$Depth
depths$Threshold[depths$Threshold < 5000000] <- 0
depths$Threshold[depths$Threshold > 5000000] <- 1
depths <- depths[rev(order(depths$Depth)),]
head(depths)
tail(depths)
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
depths$Threshold <- as.character(as.factor(depths$Threshold))
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual(values = c("1" = "black", "0" = "orange"))
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity", color = Threshold)+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
library(ggplot2)
ggplot(depths, aes(x=Samples,y=Depth,color=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,fill=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_classic()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(depths, aes(x=Samples,y=Depth,fill=Threshold)) +
geom_bar(stat="identity")+
scale_fill_manual("legend",values = c("1" = "black", "0" = "orange"))+
geom_hline(yintercept=5000000, color = "red")+
theme_minimal()+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
length(depths)
ncol(gene_counts)
library(roxygen2)
roxygen2::roxygenise()
setwd("/Users/anttonalberdi/github/holofood_metatranscriptomics/")
library(tidyverse)
library(readr)
library(stringr)
library(data.table)
library(ggplot2)
library(hilldiv)
####
####
# LOAD AND PREPARE DATA
####
####
#Gene counts
gene_counts <- read_tsv("data/gene_counts.txt")
colnames(gene_counts) <- gsub(" Read Count","",colnames(gene_counts))
nsamples=ncol(gene_counts)-1
#Gene annotations
gene_annotations <- read_tsv("data/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2) %>%
select(-scaffold, -gene_position, -start_position, -end_position, -strandedness)
gene_annotations$Genus <- unlist(lapply(strsplit(gene_annotations$bin_taxonomy, ";"),function(l) l[6]))
gene_annotations$Family <- unlist(lapply(strsplit(gene_annotations$bin_taxonomy, ";"),function(l) l[5]))
gene_annotations$Order <- unlist(lapply(strsplit(gene_annotations$bin_taxonomy, ";"),function(l) l[4]))
gene_annotations$Class <- unlist(lapply(strsplit(gene_annotations$bin_taxonomy, ";"),function(l) l[3]))
gene_annotations$Phylum <- unlist(lapply(strsplit(gene_annotations$bin_taxonomy, ";"),function(l) l[2]))
#Merge gene count and annotation tables
gene_counts_annot <- inner_join(gene_counts, gene_annotations, by="Contig")
gene_counts_annot
write_delim(gene_counts_annot,"data/gene_counts_annot.tsv")
colnames(gene_counts_annot)
gene_counts
gene_counts[1,1]
#Load expression data
expression <- read_tsv("data/gene_counts.txt")
colnames(expression) <- gsub(" Read Count","",colnames(expression))
#Load annotation data
annotations <- read_tsv("data/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2)
annotations
colnames(annotations)
#Load annotation data
annotations <- read_tsv("data/annotations_caecum.tsv") %>%
rename("Contig" = 1, "MAG" = 2)
genecol=1
magcol=2
keggcol=9
eccol=c(10,19)
pepcol=12
setDT(annotations)
annotations2 <- annotations[,c(genecol,magcol,keggcol,eccol,pepcol), with=FALSE]
colnames(annotations2) <- c("Genes","MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
annotations2
head(expression)
expression <- as.data.frame(expression)
head(expression)
rownames(expression) <- expression[,1]
expression <- expression[,1]
head(expression)
expression <- read_tsv("data/gene_counts.txt")
colnames(expression) <- gsub(" Read Count","",colnames(expression))
expression <- as.data.frame(expression)
rownames(expression) <- expression[,1]
expression <- expression[,-1]
head(expression)
length(interesect(rownames(expression),annotations2$Genes))
intersect(rownames(expression),annotations2$Genes)
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
nrow(expression2)
nrow(expression)
annotations3 <- annotations2[Genes %in% sharedgenes,]
nrow(annotations3)
nrow(annotations2)
annotations3
expression <- round(tss(expression)*1000000,0)
colSums(expression)
MAGs <- unique(dplyr::pull(annotations3, MAGs))
MAG=MAGs[1]
MAG
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
nrow(annotations_MAG)
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
#[EC:0.0.0.0]
EC <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC <- unique(unlist(strsplit(EC, " ")))
EC <- EC[!grepl("-", EC, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[pep != ""]
#Concatenate all annotations
present <- unique(c(kegg,EC,EC2,pep))
length(present)
p=present[1]
p
grepl(p,annotations_MAG)
grepl(p,annotations_MAG,value=TRUE)
annotations_MAG[grep(p, annotations_MAG), ]
p
k=p
k
annotations_MAG[grep(k, annotations_MAG$K1), ]
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]
expression <- expression[genes,]
genes
c(annotations_MAG[grep(k, annotations_MAG$K1),"Genes"])
annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression <- expression[genes,]
expression
rownames(expression) <- k
k
expression
expression <- colSums(expression[genes,])
rownames(expression) <- k
expression
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression <- colSums(expression[genes,],na.rm=TRUE)
rownames(expression) <- k
expression
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression <- expression[genes,]
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression <- expression[genes,]
head(expression2)
dim(expression3)
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
dim(expression3)
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
}
rownames(expression3) <- k
expression3
expressiom_table <- c()
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
}
rownames(expression3) <- k
expressiom_table <- rbind(expressiom_table,expression3)
}
expressiom_table
nrow(expressiom_table)
k
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
genwes
genes
expression3 <- expression2[genes,]
head(expression3)
dim(expression3)
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
}
expression3
expression3 <- t(t(expression3))
expression3
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
expression3
rownames(expression3) <- k
expression3
expressiom_table <- c()
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expressiom_table <- rbind(expressiom_table,expression3)
}
head(expressiom_table)
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
head(EC)
EC <- EC[!is.na(EC)]
head(EC)
e=EC[1]
e
genes <- annotations_MAG[(grep(e, annotations_MAG$E1)) || (grep(e, annotations_MAG$E2)),"Genes"]$Genes
nrow(genes)
genes
expression_table <- c()
cat("\t",MAG," (",m,"/",length(MAGs),")\n", sep = "")
#Fetch MAG annotations
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- EC[!is.na(EC)]
for(e in EC){
genes <- annotations_MAG[(grep(e, annotations_MAG$E1)) || (grep(e, annotations_MAG$E2)),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
head(expression_table)
tail(
expression_table
)
tail(
expression_table
,30)
nrow(expression_table)
expression_table[1050,]
expression_table[1051,]
e
genes <- annotations_MAG[(grep(e, annotations_MAG$E1)) || (grep(e, annotations_MAG$E2)),"Genes"]$Genes
length(genes)
nrow(annotations_MAG)
genes <- annotations_MAG[(grep(e, annotations_MAG$E1)) | (grep(e, annotations_MAG$E2)),"Genes"]$Genes
length(genes)
genes <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
length(genes)
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(rbind(genes1,genes2))
genes
genes2
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression3
expression_table <- c()
annotations_MAG <- annotations3[annotations3$MAGs == MAG]
#K00000
kegg <- str_extract(annotations_MAG$K1, "K[0-9]+")
kegg <- unique(kegg[!is.na(kegg)])
for(k in kegg){
genes <- annotations_MAG[grep(k, annotations_MAG$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations_MAG$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations_MAG$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- EC[!is.na(EC)]
for(e in EC){
genes1 <- annotations_MAG[(grep(e, annotations_MAG$E1)),"Genes"]$Genes
genes2 <- annotations_MAG[(grep(e, annotations_MAG$E2)),"Genes"]$Genes
genes <- unique(rbind(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
#Peptidases
pep <- unique(annotations_MAG$P1)
pep <- pep[pep != ""]
for(p in pep){
genes <- annotations_MAG[grep(k, annotations_MAG$P1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
}
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
genes1
genes2
genes <- unique(rbind(genes1,genes2))
genes
nrow(expression_table)
head(expression_table)
tail(expression_table)
library(roxygen2)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
damma_correction <- function(fullness_table,mag_completeness){
#### UNDER DEVELOPMENT ####
MAG_completeness <- as.numeric(mag_completeness[,2])
#Create corrected fullness matrix
fullness_table_corrected <- matrix(0,nrow = nrow(fullness_table),ncol = ncol(fullness_table))
colnames(fullness_table_corrected)=colnames(fullness_table)
rownames(fullness_table_corrected)=rownames(fullness_table)
#Iterate modelling and correction for each function
for(i in 1:ncol(fullness_table)){
# Arbitrary number of 10 steps is used as weights
Model <- glm(fullness_table[,i]~MAG_completeness,family = "binomial",weights = rep(10,length(MAG_completeness)))
slope_coef <- coef(Model)[2]
if(slope_coef > 0){
for(j in 1:nrow(fullness_table)){
# Model prediction of fullness if completeness was 100%
pred_100 <- round(predict(Model,newdata = data.frame(MAG_completeness=100,weights=10),type = "response"),1)
# Model prediction of fullness for actual completeness of the focal MAG
pred_focal <- round(predict(Model,newdata = data.frame(MAG_completeness=MAG_completeness[j],weights=10),type = "response"),1)
# The expected change in function fullness if focal MAG was 100% complete
pred_diff <- pred_100-pred_focal
fullness_table_corrected[j,i] = fullness_table[j,i]+pred_diff
}
}else if(slope_coef <= 0){
fullness_table_corrected[,i] <- fullness_table[,i]
}
}
# If corrected fullness >1, convert it to 1.
fullness_table_corrected[fullness_table_corrected>1] <- 1
return(fullness_table_corrected)
}
damma_corrected <- damma_correction(fullness_table,mag_completeness)
mag_completeness <- cbind(genome=c("bin_m1.cct123","bin_m1.mtb106","bin_m1.mtb2","bin_m1.mxb107_sub","bin_m1.vmb35","bin_m1.vmb46","bin_m9.vmb60"),completeness=c(100,98,85.8,94.5,97,100,70))
damma_corrected <- damma_correction(fullness_table,mag_completeness)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
library(DAMMA)
data(damma_data)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
roxygenize()
roxygenize()
rm(list = c("damma_correction"))
roxygenize()
detach_package(DAMMA)
remove.packages("DAMMA")
library(devtools)
install_github("anttonalberdi/DAMMA")
library(DAMMA)
#Load DAMMA support data
data(damma_data)
#Visualise example annotations
head(annotations_example)
#Visualise functions table
head(functions_table)
distilled_table <- damma(annotations_example,functions_table,magcol=2,keggcol=9,eccol=c(10,19),pepcol=12)
detach_package(DAMMA)
remove.packages("DAMMA")
