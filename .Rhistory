EC <- unique(unlist(strsplit(EC, " ")))
EC <- EC[!grepl("-", EC, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations2$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
#Peptidases
pep <- unique(annotations2$P1)
pep <- pep[pep != ""]
#Concatenate all annotations
present <- unique(c(kegg,EC,EC2,pep))
#Compute fullness scores
cat("\tCalculatting fullness scores...\n")
community_fullness_vector <- c()
suppressWarnings(
for(f in c(1:nrow(functions_table2))){
definition=functions_table2[f,"Definition"]
fullness <- compute_fullness(definition,present)
community_fullness_vector <- c(community_fullness_vector,fullness)
}
)
names(community_fullness_vector) <-  functions_table2$Code
head(community_fullness_vector)
community_fullness_vector
community_fullness_vector[is.na(community_fullness_vector)] <- 0
community_fullness_vector
cat("Weighing fullness scores by relative abundances...\n")
abundance_table2 <- tss(as.data.frame(abundance_table))
samples <- colnames(abundance_table)
head(abundance_table)
rownames(abundance_table) <- abundance_table[,1]
abundance_table <- abundance_table[,-1]
head(abundance_table)
abundance_table2 <- tss(as.data.frame(abundance_table))
heads(abundance_table2)
head(abundance_table2)
samples <- colnames(abundance_table)
samples
community_table <- c()
for(s in samples){
relabun <- abundance_table2[,s]
weigedfullness <- sweep(fullness_table2, 1, relabun, FUN = "*")
community_row <- colSums(weigedfullness) * community_fullness_vector
community_table <- rbind(community_table,community_row)
}
rownames(community_table) <- samples
community_table
community_table <- colMeans(fullness_table2) * community_fullness_vector
community_table
library(roxygen2)
roxygenize()
library(roxygen2)
roxygenize()
load_all('/Users/anttonalberdi/github/DAMMA')
community_fullness <- damma_community(annotations=gene_annotations,functions_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness <- damma_community(annotations=gene_annotations,functions_table,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness <- damma_community(annotations=gene_annotations,functions_table,abundance_table=genome_counts,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
abundance_table <- genome_counts[,-1]
rownames(abundance_table) <- genome_counts[,1]
head(abundance_table)
community_fullness <- damma_community(annotations=gene_annotations,functions_table,abundance_table=abundance_table,fullness_table=distilled_table,genome=2,keggcol=9,eccol=c(10,19),pepcol=12)
community_fullness
community_fullness_compounds <- damma_compounds(community_fullness,functions_table)
community_fullness_compounds
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
functions_table_df <- melt(community_fullness_compounds)
colnames(functions_table_df) <- c("Samples","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=Samples, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
functions_table_df <- melt(community_fullness_compounds)
colnames(functions_table_df) <- c("Samples","Functions","Index")
functions_table_df$Function <- as.factor(functions_table_df$Function)
functions_table_df$Function <- factor(functions_table_df$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(functions_table_df, aes(x=Samples, y=Functions, fill=Index))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0),axis.text.x=element_blank())
library(data.table)
library(ggplot2)
library(RColorBrewer)
#Prepare input table
compounds_table_df <- melt(community_fullness_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","Fullness")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=Fullness, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
#Prepare input table
compounds_table_df <- melt(community_fullness_compounds)
colnames(compounds_table_df) <- c("Samples","Compounds","MCI")
compounds_table_df2 <- merge(compounds_table_df,functions_table,by.x="Compounds",by.y="Compound")
compounds_table_df2$Function <- as.factor(compounds_table_df2$Function)
compounds_table_df2$Function <- factor(compounds_table_df2$Function, levels=c("Polysaccharide degradation","Sugar degradation","Lipid degradation","Protein degradation","Mucin degradation","SCFA production","Organic anion production","Secondary bile acid production","Amino acid production","Amino acid derivative production","Vitamin production"))
#Plot heatmap
ggplot(compounds_table_df2, aes(x=Samples, y=Compounds, fill=MCI, group=Function))+
geom_tile(colour="white", size=0.1)+
scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+
scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
#scale_fill_gradientn(limits = c(0,1), colours = rev(c("#781a25","#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#e6f598", "#abdda4", "#ddf1da","#f1faf0","#f4f4f4")))+
scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, "YlGnBu"))+
facet_grid(Function ~ ., scales = "free", space = "free")+
theme_grey(base_size=8)+
theme(strip.text.y = element_text(angle = 0))
roxygenise()
annotations=gene_annotations
functions_table
expression=gene_expression
genecol=1
genomecol=2
keggcol=9
eccol=c(10,19)
pepcol=12
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
head(annotations2)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","MAGs",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
head(annotations2)
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
fullness_table_list2
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
Genomes
annotations2$Genes
sharedgenes
rownames(expression)
head(expression)
expression=gene_expression[,-1]
rownames(expression)=gene_expression[,1]
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
head(annotations3)
class(annotations3)
Genomes
annotations3$Genomes
Genomes <- unique(annotations3$Genomes)
Genomes
head(annotations3)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations,functions_table,genecol,genomecol,keggcol,eccol,pepcol)
head(annotations_Genome)
Genome="ERR4304450bin.69"
cat("\t",Genome," (",m,"/",length(Genomes),")\n", sep = "")
cat("\t\tProcessing KEGG annotations...\n", sep = "")
#Fetch Genome annotations
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
annotations_Genome
#Simplify annotations table
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
load_all('/Users/anttonalberdi/github/DAMMA')
library(devtools)
load_all('/Users/anttonalberdi/github/DAMMA')
annotations=gene_annotations
functions_table
expression=gene_expression[,-1]
rownames(expression)=gene_expression[,1]
genecol=1
genomecol=2
keggcol=9
eccol=c(10,19)
pepcol=12
#Prepare tables
annotations <- as.data.frame(annotations)
annotations2 <- annotations[,c(genecol,genomecol,keggcol,eccol,pepcol)]
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
functions_table2 <- as.data.frame(functions_table)
fullness_table_list2 <- damma_expression(expression,annotations2,functions_table2,genecol,genomecol,keggcol,eccol,pepcol)
head(annotations2)
annotations=gene_annotations
functions_table
expression=gene_expression[,-1]
rownames(expression)=gene_expression[,1]
genecol=1
genomecol=2
keggcol=9
eccol=c(10,19)
pepcol=12
head(annotations2)
fullness_table_list2 <- damma_expression(expression,annotations2,functions_table,genecol=1,genomecol=2,keggcol=3,eccol=c(4,5),pepcol=6)
colnames(annotations2) <- c("Genes","Genomes",paste0("K",c(1:length(keggcol))),paste0("E",c(1:length(eccol))),paste0("P",c(1:length(pepcol))))
head(annotations2)
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- as.data.frame(expression[sharedgenes,])
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
#List Genomes
Genomes <- unique(annotations3$Genomes)
Genomes
Genome="ERR4304450bin.69"
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
kegg <- str_extract(annotations_Genome$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
expression_table <- data.frame()
annotations_Genome <- annotations3[annotations3$Genomes == Genome,]
#K00000
annotations_Genome <- annotations_Genome[order(annotations_Genome$K1),]
kegg <- str_extract(annotations_Genome$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations_Genome[grep(k, annotations_Genome$K1),"Genes"]$Genes
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
kegg
k="K00003"
genes <- annotations_Genome[grep(k, annotations_Genome$K1),"Genes"]$Genes
head(annotations_Genome)
annotations_Genome[grep(k, annotations_Genome$K1),"Genes"]
load_all('/Users/anttonalberdi/github/DAMMA')
fullness_table_list2 <- damma_expression(expression,annotations2,functions_table,genecol=1,genomecol=2,keggcol=3,eccol=c(4,5),pepcol=6)
fullness_table_list2
#Compute overall community-level fullness table
cat("Computing overall community-level eMCIs...\n")
cat("\tExtracting annotations...\n")
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
#Filter annotations table
annotations3 <- annotations2[Genes %in% sharedgenes,]
expression_table <- data.frame()
#K00000
annotations3 <- annotations3[order(annotations3$K1),]
kegg <- str_extract(annotations3$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations3[grep(k, annotations3$K1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations3 <- annotations3[order(annotations3$E1,annotations3$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations3$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations3$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations3[(grep(e, annotations3$E1)),"Genes"]
genes2 <- annotations3[(grep(e, annotations3$E2)),"Genes"]
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations3$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations3 <- annotations3[order(annotations3$P1),]
for(p in pep){
genes <- annotations3[grep(k, annotations3$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
#Validate expression table
sharedgenes <- intersect(rownames(expression),annotations2$Genes)
#Filter expression table
expression2 <- expression[sharedgenes,]
#Filter annotations table
annotations3 <- annotations2[annotations2$Genes %in% sharedgenes,]
expression_table <- data.frame()
#K00000
annotations3 <- annotations3[order(annotations3$K1),]
kegg <- str_extract(annotations3$K1, "K[0-9]+")
kegg <- sort(unique(kegg[!is.na(kegg)]))
for(k in kegg){
genes <- annotations3[grep(k, annotations3$K1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing EC annotations...\n", sep = "")
annotations3 <- annotations3[order(annotations3$E1,annotations3$E2),]
#[EC:0.0.0.0]
EC1 <- unlist(str_match_all(annotations3$E1, "(?<=\\[EC:).+?(?=\\])"))
EC1 <- unique(unlist(strsplit(EC1, " ")))
EC1 <- EC1[!grepl("-", EC1, fixed = TRUE)]
#(EC 0.0.0.0)
EC2 <- unlist(str_match_all(annotations3$E2, "(?<=\\(EC ).+?(?=\\))"))
EC2 <- unique(unlist(strsplit(EC2, " ")))
EC2 <- EC2[!grepl("-", EC2, fixed = TRUE)]
EC <- unique(EC1,EC2)
EC <- sort(EC[!is.na(EC)])
for(e in EC){
genes1 <- annotations3[(grep(e, annotations3$E1)),"Genes"]
genes2 <- annotations3[(grep(e, annotations3$E2)),"Genes"]
genes <- unique(c(genes1,genes2))
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- e
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tProcessing peptidase annotations...\n", sep = "")
#Peptidases
pep <- unique(annotations3$P1)
pep <- pep[(pep != "") & (!is.na(pep))]
annotations3 <- annotations3[order(annotations3$P1),]
for(p in pep){
genes <- annotations3[grep(k, annotations3$P1),"Genes"]
expression3 <- expression2[genes,]
if(dim(expression3)[1]>1){
expression3 <- colSums(expression3,na.rm=TRUE)
expression3 <- t(expression3)
rownames(expression3) <- k
expression_table <- rbind(expression_table,expression3)
}
}
cat("\t\tCalculating community expression metrics...\n")
expression_community_fullness <- c()
suppressWarnings(
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
expression_community_fullness <- c(expression_community_fullness,expression_fullness)
}
)
#Compute expression scores
cat("\t\tCalculating community expression metrics...\n")
expression_community_fullness <- c()
suppressWarnings(
for(f in c(1:nrow(functions_table))){
definition=functions_table[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
expression_community_fullness <- c(expression_community_fullness,expression_fullness)
}
)
expression_community_fullness
head(expression_table)
expression_table2 <- rowSums(expression_table)
expression_table2
head()
head(expression_table)
expression_table2 <- t(t(rowSums(expression_table)))
head(expression_table2)
expression_table2 <- t(t(rowSums(expression_table)))
colnames(expression_table2) <- "Community"
cat("\t\tCalculating community expression metrics...\n")
expression_community_fullness <- c()
suppressWarnings(
for(f in c(1:nrow(functions_table))){
definition=functions_table[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table2)
expression_community_fullness <- c(expression_community_fullness,expression_fullness)
}
)
expression_community_fullness
expression_fullness
cat("\t\tCalculating community expression metrics...\n")
expression_community_fullness <- c()
suppressWarnings(
for(f in c(1:nrow(functions_table))){
definition=functions_table[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table2)$Community
expression_community_fullness <- c(expression_community_fullness,expression_fullness)
}
)
expression_community_fullness
names(expression_community_fullness) <- functions_table$Code
expression_community_fullness
fullness_table_list2
cat("\t\tCalculating community expression metrics...\n")
suppressWarnings(
for(f in c(1:nrow(functions))){
definition=functions[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
)
#Compute expression scores
cat("\t\tCalculating community expression metrics...\n")
suppressWarnings(
for(f in c(1:nrow(functions_table))){
definition=functions_table[f,"Definition"]
#cat("\tFunction ",paste0(f,"/",nrow(functions)),"\n")
expression_fullness <- compute_fullness_expression(definition,expression_table)
if(f == 1){
#Create list if it is the first function
expression_fullness_list <- expression_fullness
}else{
#Append to list if it is not the first function
expression_fullness_list <- Map(c, expression_fullness_list, expression_fullness)
}
}
)
expression_fullness_list
expression_fullness_list <- lapply(expression_fullness_list,function(x) as.numeric(x))
expression_fullness_table <- do.call(rbind, expression_fullness_list)
colnames(expression_fullness_table) <- functions_table$Code
expression_fullness_table
samples <- colnames(expression)
samples
expression_fullness_table
library(roxygen2)
roxygenize()
